{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MoonLight","text":"The open-source lighting platform that scales from art installations to professional stages         Drive lots of lights or thousands of LEDs with stunning effects running on ESP32 microcontrollers. For creators who demand professional results without enterprise costs. Scales from small installations to large displays.    \ud83d\ude80 Get Started \u2b50 GitHub \ud83d\udcac Discord 12K LEDs 120 FPS 48 Parallel Outputs 3D Effects Engine <p>(Recommended maximum setup. Max is 128K Leds and 120 parallel outputs)</p>"},{"location":"#why-choose-moonlight","title":"\ud83c\udf1f Why Choose MoonLight?","text":"<p>MoonLight bridges the gap between hobbyist lighting projects and professional lighting systems. Get enterprise-grade performance and flexibility without the enterprise price tag - perfect for art installations, small venues, maker projects, and professional integrations.</p> Professional Performance, Maker-Friendly Everything you need to create stunning lighting experiences \u26a1 High-Performance LED Control <p>Drive lots of lights or thousands of LEDs with stunning effects running on ESP32 microcontrollers. For creators who demand professional results without enterprise costs. Scales from small installations to large displays.</p>          \u2022 12,288 LEDs @ 120 FPS         \u2022 16-48 parallel LED outputs         \u2022 FastLED + I2S drivers        \ud83c\udfa8 Advanced 3D Effects Engine <p>Create stunning visuals with our layered effects system. Support for 1D strips, 2D panels, 3D cubes, and complex custom layouts with professional effects and modifiers.</p>          \u2022 1D/2D/3D effect support         \u2022 Layered effects system         \u2022 Custom layout mapping        \ud83c\udfd7\ufe0f Flexible Light Setups <p>From simple LED strips to complex 3D installations. Build anything from accent lighting to interactive sculptures with support for multiple geometric configurations.</p>          \u2022 LED strips (1D)         \u2022 Panels &amp; matrices (2D)         \u2022 Cubes &amp; sculptures (3D)         \u2022 DMX lights like PAR lights, Light Bars and Moving Heads        \ud83c\udf10 Modern IoT Platform <p>Built on ESP32 with cutting-edge web technologies. Responsive mobile &amp; desktop interface powered by Svelte 5, with MoonBase as a standalone IoT solution.</p>          \u2022 ESP32-powered         \u2022 Svelte5 + DaisyUI5 + Tailwind4         \u2022 Desktop + Mobile-responsive UI        \ud83c\udfad Professional Integration <p>Seamlessly integrate with professional lighting systems via DMX and Art-Net protocols. Mix light installations with traditional stage lighting equipment.</p>          \u2022 DMX/Art-Net support         \u2022 Professional protocols         \u2022 Stage lighting integration        \ud83d\udc9d Open Source &amp; Affordable <p>GPL v3 licensed for maximum freedom and affordability. Perfect for artists, makers, and small venues who need professional results on a budget.</p>          \u2022 GPL v3 license         \u2022 Budget-friendly hardware         \u2022 Community-driven"},{"location":"#built-with-modern-technologies","title":"\ud83d\ude80 Built with Modern Technologies","text":"<p>Latest versions of industry-leading frameworks and libraries</p> \ud83d\udd27 ESP-IDF 5 <p>Modern ESP32 development framework with latest features</p> \ud83d\udca1 FastLED 3.10 <p>Industry-standard LED library with latest optimizations</p> \u26a1 Svelte 5 <p>Latest web framework for lightning-fast, reactive user interfaces</p> \ud83c\udfa8 PhysicHTTP 1.21 <p>High Performance Web Server</p> \ud83c\udfa8 ArduinoJson 7 <p>Advanced JSON processing</p> \ud83c\udfa8 DaisyUI 5 + Tailwind 4 <p>Modern CSS framework for beautiful, responsive design</p>"},{"location":"#perfect-for","title":"\ud83c\udfaf Perfect For","text":"<p>\ud83c\udfa8 Artists &amp; Creators - Bring your vision to life without breaking the bank \ud83c\udfdb\ufe0f Small Venues - Professional lighting effects for theaters, events, and installations \ud83d\udd27 Makers &amp; Hobbyists - Advanced features with user-friendly interfaces \ud83d\udcbc Professionals - Integrate into existing lighting systems with standard protocols \ud83c\udfeb Educational - Open source platform perfect for learning and teaching  </p>"},{"location":"#technical-specifications","title":"\ud83d\udcca Technical Specifications","text":"Category Specification Details LED Performance 12,288 @ 120 FPS - 48 outputs High-performance parallel processing Outputs 1-128 parallel strips Simultaneous multi-strip control Effects 1D/2D/3D engine Layered effects with modifiers Protocols DMX, Art-Net, WiFi Professional lighting integration Platform ESP32 + SvelteKit Modern IoT architecture License GPL v3 Free for commercial use"},{"location":"#quick-start-ready-in-minutes","title":"\ud83d\ude80 Quick Start - Ready in Minutes","text":"1\ufe0f\u20e3 Flash &amp; Go <p>Use our web installer to flash MoonLight directly to your ESP32. No complex setup or development environment needed.</p> Start Installation 2\ufe0f\u20e3 Connect &amp; Configure <p>Built-in access point makes initial WiFi setup effortless. Configure your network and LED setup through the intuitive web interface.</p> WiFi Setup 3\ufe0f\u20e3 Create &amp; Enjoy <p>Start creating stunning effects immediately. Responsive interface works perfectly on both mobile and desktop devices.</p> Learn Effects"},{"location":"#release-roadmap-user-focused-development","title":"\ud83d\udcc8 Release Roadmap - User-Focused Development","text":"<p>Current Status</p> <p>Version 0.5.9.3 - Developer preview available now</p> <p>Version 0.6.0 - October 2025 - The user-friendly baseline release</p> <p>\u2728 Coming in 0.6.0 - Plug &amp; Play Experience - True user-friendly installation - Preset Controller - Quick effect selection and management - Enhanced Web Installer - One-click device flashing - Large Display Drivers - Physical and virtual drivers for massive installations - WLED Audio Sync - Seamless music synchronization - Refined Interface** - Polished user experience</p> <p>From 0.6.0 Forward: Community-driven development with focus on ease of use, more effects, and expanded hardware support.</p>"},{"location":"#architecture-flexibility","title":"\ud83c\udfd7\ufe0f Architecture &amp; Flexibility","text":"<p>MoonLight is built on MoonBase, our complete IoT framework, making it incredibly flexible:</p> <p>\ud83c\udfae For LED Enthusiasts: Use MoonLight as a complete lighting solution \ud83d\udd27 For Developers: Fork MoonBase to create custom IoT applications \ud83c\udfed For Integrators: Embed into larger systems using standard protocols  </p> <ul> <li>Modular Design - Add or remove features as needed</li> <li>GPIO Access - Full ESP32 hardware interface</li> <li>Custom Applications - Build anything from smart plugs to greenhouse control</li> <li>Standard Protocols - WiFi, Ethernet, Art-Net, DMX integration</li> </ul>"},{"location":"#join-the-community","title":"\ud83e\udd1d Join the Community","text":"\ud83d\udcac Active Discord Community <p>Get real-time help, share your creations, and collaborate with fellow creators. From beginners to professionals, everyone's welcome.</p> Join Discord \ud83d\udc68\u200d\ud83d\udcbb Developer Community <p>Contribute to the future of LED control. Help with effects, UI improvements, hardware support, and documentation.</p> Contribute on GitHub <p>MoonLight is a MoonModules.org project - Created by the lighting enthusiasts behind WLED-MM.</p> <p>Connect With Us: - \ud83d\udcac Discord Community - Real-time support &amp; project sharing - \ud83d\udde8\ufe0f Reddit - Discussion and showcase - \ud83d\udccb GitHub - Source code and issues - \ud83d\udcda Documentation - Complete technical docs</p> Ready to Light Up Your World?      Join the creators using MoonLight for professional LED installations    \ud83d\ude80 Get Started Now \ud83d\udce6 Download Latest"},{"location":"#support-open-source-development","title":"\u2764\ufe0f Support Open Source Development","text":"<p>MoonLight is free. Help us continue building amazing tools for the creative community:</p> \u2b50 Star on GitHub \ud83d\udcb0 GitHub Sponsors \ud83d\udcb5 PayPal"},{"location":"#built-on-amazing-open-source","title":"\ud83d\udcc4 Built on Amazing Open Source","text":"<p>License: GPL-v3 - Free for personal and commercial use</p> <p>Powered by these incredible projects: - ESP32-sveltekit - Foundation framework - PsychicHttp - High-performance web server - FastLED - Industry-standard LED library - ArduinoJson - Advanced JSON processing - I2SClocklessLedDriver - Parallel LED control - I2SClocklessVirtualLedDriver - Virtual Driver - ESPLiveScript - Scripts - WLED-sync - Audio</p> <p>\u26a0\ufe0f Disclaimer: Using this software is the sole user's responsibility as it is not bug free. Therefore, contributors of this repo are not liable for anything, including but not limited to spontaneous combustion of the entire LED strip, the house and the inevitable heat death of the universe \ud83d\udd25\ud83d\udd7a\ud83c\udf0c</p> <p>Ready to create something amazing? Get started now! \ud83c\udf19\u2728</p>"},{"location":"buildprocess/","title":"Build Process","text":"<p>The build process is controlled by platformio.ini and automates the build of the front end website with Vite as well as the binary compilation for the ESP32 firmware. Whenever PlatformIO is building a new binary it will call the python script build_interface.py to action. It will check the frontend files for changes. If necessary it will start the Vite build and gzip the resulting files either to the <code>data/</code> directory or embed them into a header file. In case the WWW files go into a LITTLEFS partition a file system image for the flash is created for the default build environment and upload to the ESP32.</p>"},{"location":"buildprocess/#changing-the-js-package-manager","title":"Changing the JS package manager","text":"<p>This project uses NPM as the default package manager. However, many users might have different preferences and like to use YARN or PNPM instead. Just switch the interface to one of the other package managers. The build script identify the package manager by the presence of its lock-file and start the vite build process accordingly.</p>"},{"location":"buildprocess/#serving-from-flash-or-embedding-into-the-binary","title":"Serving from Flash or Embedding into the Binary","text":"<p>The front end website can be served either from the LITTLEFS partition of the flash, or embedded into the firmware binary (default). Later has the advantage that only one binary needs to be distributed easing the OTA process. Further more this is desirable if you like to preserve the settings stored in the LITTLEFS partition, or have other files there that need to survive a firmware update. To serve from the LITTLEFS partition instead please comment the following build flag out:</p> <pre><code>build_flags =\n    ...\n    -D EMBED_WWW\n</code></pre>"},{"location":"buildprocess/#partitioning","title":"Partitioning","text":"<p>If you choose to embed the frontend it becomes part of the firmware binary (default). As many ESP32 modules only come with 4MB built-in flash this results in the binary being too large for the reserved flash. Therefor a partition scheme with a larger section for the executable code is selected. However, this limits the LITTLEFS partition to 200kb. There are a great number of default partition tables for Arduino-ESP32 to choose from. If you have 8MB or 16MB flash this would be your first choice. If you don't need OTA you can choose a partition scheme without OTA.</p> <p>Should you want to deploy the frontend from the flash's LITTLEFS partition on a 4MB chip you need to comment out the following two lines. Otherwise the 200kb will not be large enough to host the front end code.</p> <pre><code>board_build.partitions = min_spiffs.csv\n</code></pre>"},{"location":"buildprocess/#selecting-features","title":"Selecting Features","text":"<p>Many of the framework's built in features may be enabled or disabled as required at compile time. This can help save sketch space and memory if your project does not require the full suite of features. The access point and WiFi management features are \"core features\" and are always enabled. Feature selection may be controlled with the build flags defined in features.ini.</p> <p>Customize the settings as you see fit. A value of 0 will disable the specified feature:</p> <pre><code>  -D FT_SECURITY=1\n  -D FT_MQTT=1\n  -D FT_NTP=1\n  -D FT_UPLOAD_FIRMWARE=1\n  -D FT_DOWNLOAD_FIRMWARE=1\n  -D FT_SLEEP=1\n  -D FT_BATTERY=1\n</code></pre> Flag Description FT_SECURITY Controls whether the security features are enabled. Disabling this means you won't need to authenticate to access the device and all authentication predicates will be bypassed. FT_MQTT Controls whether the MQTT features are enabled. Disable this if your project does not require MQTT support. FT_NTP Controls whether network time protocol synchronization features are enabled. Disable this if your project does not require accurate time. FT_UPLOAD_FIRMWARE Controls whether the manual upload firmware feature is enabled. Disable this if you won't be manually uploading firmware. FT_DOWNLOAD_FIRMWARE Controls whether the firmware download feature is enabled. Disable this if you won't firmware pulled from a server. FT_SLEEP Controls whether the deep sleep feature is enabled. Disable this if your device is not battery operated or you don't need to place it in deep sleep to save energy. FT_BATTERY Controls whether the battery state of charge shall be reported to the clients. Disable this if your device is not battery operated. <p>In addition custom features might be added or removed at runtime. See Custom Features on how to use this in your application.</p>"},{"location":"buildprocess/#factory-settings","title":"Factory Settings","text":"<p>The framework has built-in factory settings which act as default values for the various configurable services where settings are not saved on the file system. These settings can be overridden using the build flags defined in factory_settings.ini. All strings entered here must be escaped, especially special characters.</p> <p>Customize the settings as you see fit, for example you might configure your home WiFi network as the factory default:</p> <pre><code>  -D FACTORY_WIFI_SSID=\\\"My\\ Awesome\\ WiFi\\ Network\\\"\n  -D FACTORY_WIFI_PASSWORD=\\\"secret\\\"\n  -D FACTORY_WIFI_HOSTNAME=\\\"awesome_light_controller\\\"\n</code></pre>"},{"location":"buildprocess/#default-access-point-settings","title":"Default access point settings","text":"<p>By default, the factory settings configure the device to bring up an access point on start up which can be used to configure the device:</p> <ul> <li>SSID: ESP32-Sveltekit</li> <li>Password: esp-sveltekit</li> </ul>"},{"location":"buildprocess/#security-settings-and-user-credentials","title":"Security settings and user credentials","text":"<p>By default, the factory settings configure two user accounts with the following credentials:</p> Username Password admin admin guest guest <p>It is recommended that you change the user credentials from their defaults to better protect your device. You can do this in the user interface, or by modifying factory_settings.ini as mentioned above.</p>"},{"location":"buildprocess/#customizing-the-factory-time-zone-setting","title":"Customizing the factory time zone setting","text":"<p>Changing factory time zone setting is a common requirement. This requires a little effort because the time zone name and POSIX format are stored as separate values for the moment. The time zone names and POSIX formats are contained in the UI code in timezones.ts. Take the appropriate pair of values from there, for example, for Los Angeles you would use:</p> <pre><code>  -D FACTORY_NTP_TIME_ZONE_LABEL=\\\"America/Los_Angeles\\\"\n  -D FACTORY_NTP_TIME_ZONE_FORMAT=\\\"PST8PDT,M3.2.0,M11.1.0\\\"\n</code></pre>"},{"location":"buildprocess/#placeholder-substitution","title":"Placeholder substitution","text":"<p>Various settings support placeholder substitution, indicated by comments in factory_settings.ini. This can be particularly useful where settings need to be unique, such as the Access Point SSID or MQTT client id. The following placeholders are supported:</p> Placeholder Substituted value #{platform} The microcontroller platform, e.g. \"esp32\" or \"esp32c3\" #{unique_id} A unique identifier derived from the MAC address, e.g. \"~~0b0a859d~~6816\" \ud83c\udf19 #{random} A random number encoded as a hex string, e.g. \"55722f94\""},{"location":"buildprocess/#other-build-flags","title":"Other Build Flags","text":""},{"location":"buildprocess/#cross-origin-resource-sharing","title":"Cross-Origin Resource Sharing","text":"<p>If you need to enable Cross-Origin Resource Sharing (CORS) on the ESP32 server just uncomment the following build flags:</p> <pre><code>build_flags =\n...\n  ; Uncomment to configure Cross-Origin Resource Sharing\n  -D ENABLE_CORS\n  -D CORS_ORIGIN=\\\"*\\\"\n</code></pre> <p>This will add the <code>Access-Control-Allow-Origin</code> and <code>Access-Control-Allow-Credentials</code> headers to any request made.</p>"},{"location":"buildprocess/#esp32-core_debug_level","title":"ESP32 <code>CORE_DEBUG_LEVEL</code>","text":"<p>The ESP32 Arduino Core and many other libraries use the ESP Logging tools. To enable these debug and error messages from deep inside your libraries uncomment the following build flag.</p> <pre><code>build_flags =\n...\n    -D CORE_DEBUG_LEVEL=5\n</code></pre> <p>It accepts values from 5 (Verbose) to 1 (Errors) for different information depths to be logged on the serial terminal. If commented out there won't be debug messages from the core libraries. For a production build you should comment this out.</p>"},{"location":"buildprocess/#serve-config-files","title":"Serve Config Files","text":"<p>By enabling this build flag the ESP32 will serve all config files stored on the LittleFS flash partition under <code>http:\\\\[IP]\\config\\[filename].json</code>. This can be helpful to troubleshoot problems. However, it is strongly advised to disable this for production builds.</p> <pre><code>build_flags =\n...\n  -D SERVE_CONFIG_FILES\n</code></pre>"},{"location":"buildprocess/#serial-info","title":"Serial Info","text":"<p>In some circumstances it might be beneficial to not print any information on the serial consol (Serial1 or USB CDC). By commenting out the following build flag ESP32-Sveltekit will not print any information on the serial console.</p> <pre><code>build_flags =\n...\n  -D SERIAL_INFO\n</code></pre>"},{"location":"buildprocess/#ssl-root-certificate-store","title":"SSL Root Certificate Store","text":"<p>Some features like firmware download or the MQTT client require a SSL connection. For that the SSL Root CA certificate must be known to the ESP32. The build system contains a python script derived from Espressif ESP-IDF building a certificate store containing one or more certificates. In order to create the store you must uncomment the three lines below in <code>platformio.ini</code>.</p> <pre><code>extra_scripts =\n    pre:scripts/generate_cert_bundle.py\nboard_build.embed_files = src/certs/x509_crt_bundle.bin\nboard_ssl_cert_source = adafruit\n</code></pre> <p>The script will download a public certificate store from Mozilla (<code>board_ssl_cert_source = mozilla</code>) or a repository curated by Adafruit (<code>board_ssl_cert_source = adafruit</code>) or (<code>board_ssl_cert_source = adafruit-full</code>), builds a binary containing all certs and embeds this into the firmware. This will add ~65kb to the firmware image. Should you only need a few known certificates you can place their <code>*.pem</code> or <code>*.der</code> files in the ssl_certs folder and change <code>board_ssl_cert_source = folder</code>. Then only these certificates will be included in the store. This is especially useful, if you only need to connect to know servers and need to shave some kb off the firmware image:</p> <p>Info</p> <p>To enable SSL the feature <code>FT_NTP=1</code> must be enabled as well.</p>"},{"location":"buildprocess/#vite-and-littlefs-32-character-limit","title":"Vite and LittleFS 32 Character Limit","text":"<p>The static files for the website are build using vite. By default vite adds a unique hash value to all filenames for improved caching performance. However, LittleFS on the ESP32 is limited to filenames with 32 characters. This restricts the number of characters available for the user to name svelte files. To give a little bit more headroom a vite-plugin removes all hash values, as they offer no benefit on an ESP32. However, have the 32 character limit in mind when naming files. Excessively long names may still cause some issues when building the LittleFS binary.</p>"},{"location":"buildprocess/#merged-firmware-file-for-web-flasher","title":"Merged Firmware File for Web Flasher","text":"<p>The PIO build system calls a script <code>merge_bin.py</code> to create a merged firmware binary ready to be used with ESP Web Tools. The file is located under the PIO build folder. Typically <code>build/merged/{APP_NAME}_{$PIOENV}_{APP_VERSION}.bin</code>.</p>"},{"location":"components/","title":"Components","text":"<p>The project includes a number of components to create the user interface. Even though DaisyUI has a huge set of components, it is often beneficial to recreate them as a Svelte component. This offers a much better integration into the Svelte way of doing things, is less troublesome with animations and results in a overall better user experience.</p>"},{"location":"components/#collapsible","title":"Collapsible","text":"<p>A collapsible container to hide / show content by clicking on the arrow button.</p> <pre><code>import Collapsible from \"$lib/components/Collapsible.svelte\";\n</code></pre> <p>It exports a closed / open state with <code>export open</code> which you can use to determine the mounting behavior of the component.</p>"},{"location":"components/#slots","title":"Slots","text":"<p>The component has two slots. A named slot <code>title</code> for the collapsible title and the main slot for the content that can be hidden or shown.</p> <pre><code>&lt;Collapsible open={false} class=\"shadow-lg\" on:closed={doSomething}&gt;\n  &lt;span slot=\"title\"&gt;Title&lt;/span&gt;\n  ...\n&lt;/Collapsible&gt;\n</code></pre> <p>The <code>class</code> attribute may be used as normal to style the container. By default there is no special styling like background or shadows to accentuate the container element.</p>"},{"location":"components/#events","title":"Events","text":"<p>The collapsible component dispatches two events. <code>on:closed</code> when the collapsible is closed and <code>on:opened</code> when it is opened. You can bind to them as to any other event.</p>"},{"location":"components/#inputpassword","title":"InputPassword","text":"<p>This is an input field specifically for passwords. It comes with an \"eye\"-button on the right border to toggle the visibility of the password. It natively blends into the style from DaisyUI.</p> <pre><code>import InputPassword from \"$lib/components/InputPassword.svelte\";\n</code></pre> <p>You may use it like any other form element:</p> <pre><code>&lt;InputPassword id=\"pwd\" bind:value={password} /&gt;\n</code></pre>"},{"location":"components/#rssiindicator","title":"RSSIIndicator","text":"<p>This shows the popular WiFi strength indicator icon with differently highlighted circles depending on the received signal strength (RSSI) of the WiFi signal. In addition it can display the signal strength in raw \"dBm\" as an indicator badge.</p> <pre><code>import RssiIndicator from \"$lib/components/RSSIIndicator.svelte\";\n</code></pre> <p>Just use and style as you please. It doesn't have any slots or events.</p> <pre><code>&lt;RssiIndicator showDBm={true} rssi_dbm={-85} class=\"text-base-content h-10 w-10\" /&gt;\n</code></pre> <p>Two exports control the behavior of the component. <code>rssi_dbm</code> accepts a negative number of the raw RSSI in dBm and is used to determine how many circles of reception should be shown. An optional boolean <code>showDBm</code> (defaults to <code>false</code>) shows the indicator badge with the dBm value.</p>"},{"location":"components/#settings-card","title":"Settings Card","text":"<p>A Settings Card is in many ways similar to a collapsible. However, it is styled and is the main element of many settings menus. It also accepts an icon in a dedicate slot and unlike collapsible has no events.</p> <pre><code>import SettingsCard from \"$lib/components/SettingsCard.svelte\";\n</code></pre>"},{"location":"components/#slots_1","title":"Slots","text":"<p>Three slots are available. Besides the main slot for the content there is a named slot for the <code>title</code> and s second one for the <code>icon</code>.</p> <pre><code>&lt;SettingsCard collapsible={true} open={false}&gt;\n    &lt;Icon slot=\"icon\" class=\"lex-shrink-0 mr-2 h-6 w-6 self-end\" /&gt;\n    &lt;span slot=\"title\"&gt;Title&lt;/span&gt;\n    ...\n&lt;/SettingsCard&gt;\n</code></pre> <p>The component exports two properties to determine its behavior. <code>collapsible</code> is a boolean describing wether the component should behave like a collapsible in the first place. <code>open</code> is a boolean as well and if set true shows the full content of the body on mount.</p>"},{"location":"components/#spinner","title":"Spinner","text":"<p>A small component showing an animated spinner which can be used while waiting for data.</p> <pre><code>import Spinner from \"$lib/components/Spinner.svelte\";\n</code></pre> <p>No slots, no events, no properties. Just use <code>&lt;Spinner/&gt;</code> whenever something is loading.</p>"},{"location":"components/#toast-notifications","title":"Toast Notifications","text":"<p>Toast notifications are implemented as a writable store and are easy to use from any script section. They are an easy way to feedback to the user. To use them just import the notifications store</p> <pre><code>import { notifications } from \"$lib/components/toasts/notifications\";\n</code></pre> <p>and call one of the 4 toast methods:</p> Method Description <code>notification.error(msg:string, timeout:number)</code>  Shows an error message <code>notification.warning(msg:string, timeout:number)</code>  Shows a warning message <code>notification.info(msg:string, timeout:number)</code>  Shows an info message <code>notification.success(msg:string, timeout:number)</code>  Shows as success message <p>Each method takes an <code>msg</code>-string as an argument, which will be shown as the message body. It accepts HTML to enrich your toasts, if you should desire to do so. The <code>timeout</code> argument specifies how many milliseconds the toast notification shall be shown to the user.</p>"},{"location":"components/#github-update-dialog","title":"Github Update Dialog","text":"<p>This is a modal showing the update progress, possible error messages and makes a full page refresh 5 seconds after the OTA was successful.</p>"},{"location":"components/#update-indicator","title":"Update Indicator","text":"<p>The update indicator is a small widget shown in the upper right corner of the status bar. It indicates the availability of a newer firmware release then the current one. Upon pressing the icon it will automatically update the firmware to the latest release. By default this works through the Github Latest Release API. This must be customized should you use a different update server. Have a look at the source file to see what portions to update.</p>"},{"location":"components/#info-dialog","title":"Info Dialog","text":"<p>Shows a modal on the UI which must be deliberately dismissed. It features a <code>title</code> and a <code>message</code> property. The dismiss button can be customized via the <code>dismiss</code> property with a label and an icon. <code>onDismiss</code> call back must close the modal and can be used to do something when closing the info dialog.</p> <pre><code>import InfoDialog from \"$lib/components/InfoDialog.svelte\";\n\nmodals.open(InfoDialog, {\n  title: 'You have a new Info',\n  message:\n    'Something really important happened that justifies showing you a modal which must be clicked away.',\n  dismiss: { label: 'OK', icon: Check },\n  onDismiss: () =&gt; modals.close();\n});\n</code></pre> <p>This modal is based on svelte-modals where you can find further information.</p>"},{"location":"components/#confirm-dialog","title":"Confirm Dialog","text":"<p>Shows a confirm modal on the UI which must be confirmed to proceed, or can be canceled. It features a <code>title</code> and a <code>message</code> property. The <code>confirm</code> and <code>cancel</code> buttons can be customized via the <code>labels</code> property with a label and an icon. <code>onConfirm</code> call back must close the modal and can be used to trigger further actions.</p> <pre><code>import ConfirmDialog from \"$lib/components/ConfirmDialog.svelte\";\n\nmodals.open(ConfirmDialog, {\n  title: \"Confirm what you are doing\",\n  message: \"Are you sure you want to proceed? This could break stuff!\",\n  labels: {\n    cancel: { label: \"Abort\", icon: Cancel },\n    confirm: { label: \"Confirm\", icon: Check },\n  },\n  onConfirm: () =&gt; modals.close(),\n});\n</code></pre> <p>This modal is based on svelte-modals where you can find further information.</p> <p>\ud83c\udf19</p>"},{"location":"components/#moonbase-components","title":"MoonBase components","text":""},{"location":"components/#multiinput","title":"MultiInput","text":"<p>Support for html input widgets including text, number, range, checkbox and pad (multiple buttons in 2D array layout)</p>"},{"location":"components/#array","title":"Array","text":"<ul> <li>Show an array of objects<ul> <li>Summary and editor</li> </ul> </li> <li>Recursive<ul> <li>An array can have an array e.g. multiple nodes with multiple controls per node</li> </ul> </li> <li>Uses MultiInput</li> <li>Used data and definition rest apis</li> </ul>"},{"location":"components/#fileedit","title":"FileEdit","text":"<p>Arguments</p> <ul> <li>path: file or folder to edit</li> <li>showEditor: collapsed or not</li> <li>newItem</li> <li>isFile: or folder</li> </ul> <p>Functions</p> <ul> <li>postFilesState / uploadFile</li> <li>getFileContents</li> <li>$: if (editableFile.path != path): reactive</li> <li>onSave (-&gt;postFilesState)</li> </ul>"},{"location":"esp32sveltekit/","title":"ESP32 SvelteKit - Create Amazing IoT Projects","text":"<p>A simple and extensible framework for ESP32 based IoT projects with a feature-rich, beautiful, and responsive front-end build with Sveltekit, TailwindCSS and DaisyUI. This is a project template to get you started in no time backed by a powerful back end service, an amazing front end served from the ESP32 and an easy to use build chain to get everything going.</p> <p>It was forked from the fabulous rjwats/esp8266-react project, from where it inherited the mighty back end services.</p> <p>Info</p> <p>This template repository is not meant to be used stand alone. If you're just looking for a WiFi manager there are plenty of options available. This is a starting point when you need a rich web UI.</p>"},{"location":"esp32sveltekit/#features","title":"Features","text":""},{"location":"esp32sveltekit/#beautiful-ui-powered-by-daisyui-and-tailwindcss","title":"Beautiful UI powered by DaisyUI and TailwindCSS","text":"<p>Beautiful, responsive UI which works equally well on desktop and on mobile. Gently animated for a snappy and modern feeling without ever being obtrusive or in the way. Easy theming with DaisyUI and media-queries to respect the users wish for a light or dark theme.</p>"},{"location":"esp32sveltekit/#low-memory-footprint-and-easy-customization-by-courtesy-of-sveltekit","title":"Low Memory Footprint and Easy Customization by Courtesy of SvelteKit","text":"<p>SvelteKit is ideally suited to be served from constrained devices like an ESP32. It's unique approach leads to very slim files. No bloatware like other popular JS frameworks. Not only the low memory footprint make it ideal but the developer experience is also outstanding letting you customize the front end with ease. Adapt and add functionality as you need it. The back end has you covered as well.</p>"},{"location":"esp32sveltekit/#rich-communication-interfaces","title":"Rich Communication Interfaces","text":"<p>Comes with a rich set of communication interfaces to cover most standard needs of an IoT application. Like MQTT client, HTTP RESTful API, a WebSocket based Event Socket and a classic Websocket Server. All communication channels are stateful and fully synchronized. Changes propagate and are communicated to all other participants. The states can be persisted on the file system as well. For accurate time keeping time can by synchronized over NTP.</p>"},{"location":"esp32sveltekit/#wifi-provisioning-and-management","title":"WiFi Provisioning and Management","text":"<p>Naturally ESP32 SvelteKit comes with rich features to manage all your WiFi needs. From pulling up an access point for provisioning or as fall back, to fully manage your WiFi networks. Scan for available networks and connect to them. Advanced configuration options like static IP are on board as well.</p>"},{"location":"esp32sveltekit/#secured-api-and-user-management","title":"Secured API and User Management","text":"<p>Manage different user of your app with two authorization levels. An administrator and a guest user. Authenticate their API calls with a JWT token. Manage the user's profile from the admin interface. Use at own risk, as it is neither secure without the ability to use TLS/SSL encryption on the ESP32 server, nor very convenient, as only an admin can change passwords.</p>"},{"location":"esp32sveltekit/#ota-upgrade-service","title":"OTA Upgrade Service","text":"<p>The framework can provide two different channels for Over-the-Air updates. Either by uploading a *.bin file from the web interface. Or by pulling a firmware image from an update server. This is implemented with the github release page as an example. It is even possible to have different build environments at the same time and the Github OTA process pulls the correct binary.</p>"},{"location":"esp32sveltekit/#automated-build-chain","title":"Automated Build Chain","text":"<p>The automated build chain takes out the pain and tears of getting all the bits and pieces play nice together. The repository contains a PlatformIO project at its heart. A SvelteKit project for the frontend code and a mkdocs project for the documentation go alongside. The PlatformIO build tools not only build the SvelteKit frontend with Vite, but also ensure that the build results are gzipped and find their way into the flash memory of the ESP32. You have two choices to serve the frontend either from the flash partition, or embedded into the firmware binary. The latter is much more friendly if your frontend code should be distributed OTA as well, leaving all configuration files intact.</p>"},{"location":"esp32sveltekit/#compatible-with-all-esp32-flavours","title":"Compatible with all ESP32 Flavours","text":"<p>The code runs on all variants of the ESP32 chip family. From the plain old ESP32, the ESP32-S3 and ESP32-C3. Other ESP32 variants might work, but haven't been tested. Sorry, no support for the older ESP8266. Go with one of the ESP32's instead.</p> <p>Let's get started!</p>"},{"location":"esp32sveltekit/#license","title":"License","text":"<p>ESP32 SvelteKit is distributed with two licenses for different sections of the code. The back end code inherits the GNU LESSER GENERAL PUBLIC LICENSE Version 3 and is therefore distributed with said license. The front end code is distributed under the MIT License. See the LICENSE for a full text of both licenses.</p>"},{"location":"gettingstarted/","title":"Getting Started","text":""},{"location":"gettingstarted/#prerequisites","title":"Prerequisites","text":"<p>This project has quite a complicated build chain to prepare the frontend code for the ESP32. You will need to install some tools to make this all work, starting with a powerful code editor.</p>"},{"location":"gettingstarted/#softwares-to-install","title":"Softwares to Install","text":"<p>Please install the following software, if you haven't already:</p> <ul> <li>VSCode - IDE for development</li> <li>Node.js - For building the interface with npm</li> </ul>"},{"location":"gettingstarted/#vscode-plugins-and-setups","title":"VSCode Plugins and Setups","text":"<p>Please install the following mandatory VSCode Plugins:</p> <ul> <li>PlatformIO - Embedded development platform</li> <li>Prettier - Automated code formatter</li> <li>Svelte for VS Code - Makes working with Svelte much easier</li> <li>Svelte Intellisense - Another Svelte tool</li> <li>Tailwind CSS Intellisense - Makes working with Tailwind CSS much easier</li> <li>Prettier plugin for Tailwind CSS - Automatically sorts the Tailwind classes into their recommended order</li> </ul> <p>Lastly, if you want to make use of Materials for MkDocs as your documentation engine, install Material for MkDocs by typing the following into the VSCode terminal:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Tip</p> <p>You might need to run this as administrator, if you getting an error message.</p>"},{"location":"gettingstarted/#project-structure","title":"Project Structure","text":"Resource Description .github/ Github CI pipeline to deploy MkDocs to gh-pages docs/ MkDocs documentation files interface/ SvelteKit based front end lib/framework/ C++ back end for the ESP32 device src/ The main.cpp and demo project to get you started scripts/ Scripts that build the interface as part of the platformio build platformio.ini PlatformIO project configuration file mkdocs.yaml MkDocs project configuration file"},{"location":"gettingstarted/#setting-up-platformio","title":"Setting up PlatformIO","text":""},{"location":"gettingstarted/#setup-build-target","title":"Setup Build Target","text":"<p>Do not use the PlatformIO UI for editing platformio.ini</p> <p>It is tempting to use the PlatformIO user interface to add dependencies or parameters to platformio.ini. However, doing so will remove all \"irrelevant\" information like comments from the file. Please edit the file directly in the editor.</p> <p>platformio.ini is the central file controlling the whole build process. It comes pre-configure with a few boards which have different ESP32 chips. It needs to be adapted to the board you want to program.</p> <pre><code>[platformio]\n...\ndefault_envs = esp32-s3-devkitc-1\n...\n\n[env:adafruit_feather_esp32_v2]\nboard = adafruit_feather_esp32_v2\nboard_build.mcu = esp32\n\n[env:lolin_c3_mini]\nboard = lolin_c3_mini\nboard_build.mcu = esp32c3\n\n[env:esp32-s3-devkitc-1]\nboard = esp32-s3-devkitc-1\nboard_build.mcu = esp32s3\n</code></pre> <p>If your board is not listed in the platformio.ini you may look in the official board list for supported boards and add their information accordingly. Either delete the obsolete <code>[env:...]</code> sections, or change your board as <code>default_envs = ...</code>.</p> <p>Default setup is for an ESP32-S3-DevKitC/M board</p> <p>The projects platformio.ini defaults for an ESP32-S3-DevKitC/M board by Espressif connected to the UART USB port. If you use an other board and the projects shows an undesired behavior it is likely that some parts do not match with pin definitions.</p>"},{"location":"gettingstarted/#build-upload-process","title":"Build &amp; Upload Process","text":"<p>After you've changed platformio.ini to suit your board you can upload the sample code to your board. This will download all ESP32 libraries and execute <code>node install</code> to install all node packages as well. Select your board's environment under the PlatformIO tab and hit <code>Upload and Monitor</code>.</p> <p></p> <p>The first build process will take a while. After a couple of minutes you can see the ESP32 outputting information on the terminal. Some of the python scripts might need to install additional packages. In that case the first build process will fail. Just run it a second time.</p> <p>Use several terminals in parallel</p> <p>VSCode allows you to have more then one terminal running at the same time. You can dedicate one terminal to the serial monitor, while having the development server running in an other terminal.</p>"},{"location":"gettingstarted/#setting-up-sveltekit","title":"Setting up SvelteKit","text":""},{"location":"gettingstarted/#setup-proxy-for-development","title":"Setup Proxy for Development","text":"<p>To ease the frontend development you can deploy the back end code on an ESP32 board and pass the websocket and REST API calls through the development server's proxy. The vite.config.ts file defines the location of the services which the development server will proxy. This is defined by the \"target\" property, which will need to be changed to the the IP address or hostname of the device running the firmware. Change this for both, \"http://\" and \"ws://\".</p> <pre><code>proxy: {\n    // Proxying REST: http://localhost:5173/rest/bar -&gt; http://192.168.1.83/rest/bar\n    '/rest': {\n    target: 'http://192.168.1.83',\n    changeOrigin: true,\n    },\n    // Proxying websockets ws://localhost:5173/ws -&gt; ws://192.168.1.83/ws\n    '/ws': {\n    target: 'ws://192.168.1.83',\n    changeOrigin: true,\n    ws: true,\n    },\n},\n</code></pre> <p>Tip</p> <p>You must restart the development server for changes of the proxy location to come into effect.</p>"},{"location":"gettingstarted/#development-server","title":"Development Server","text":"<p>The interface comes with Vite as a development server. It allows hot module reloading reflecting code changes to the front end instantly in your browser. Open a new terminal session and execute the following commands:</p> <pre><code>cd interface\nnpm run dev\n</code></pre> <p>Follow the link to access the front end in your browser.</p>"},{"location":"gettingstarted/#setup-material-for-mkdocs","title":"Setup Material for mkdocs","text":"<p>Material for MkDocs allows you to create great technical documentation pages just from markup. If you don't want to use it just delete the <code>.github</code> and <code>docs</code> folder, as well as <code>mkdocs.yaml</code>.</p> <p>Otherwise initiate the github CI pipeline by committing and pushing to your repository once. This triggers the automatic build. After a few minutes a new branch <code>gh-pages</code> containing the static website with your documentation should appear. To deploy it go to your github repository go under settings and complete the following steps. </p>"},{"location":"gettingstarted/#development-server_1","title":"Development Server","text":"<p>MkDocs comes with a build-in development server which supports hot reload as well. Open a new terminal session in VSCode and type</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"restfulapi/","title":"RESTful API","text":"<p>The back end exposes a number of API endpoints which are referenced in the table below.</p> Method Request URL Authentication POST JSON Body Info GET /rest/features <code>NONE_REQUIRED</code> none Tells the client which features of the UI should be use GET /rest/mqttStatus <code>IS_AUTHENTICATED</code> none Current MQTT connection status GET /rest/mqttSettings <code>IS_ADMIN</code> none Currently used MQTT settings POST /rest/mqttSettings <code>IS_ADMIN</code> <code>{\"enabled\":false,\"uri\":\"mqtt://192.168.1.12:1883\",\"username\":\"\",\"password\":\"\",\"client_id\":\"esp32-f412fa4495f8\",\"keep_alive\":120,\"clean_session\":true,\"message_interval_ms\":0}</code> Update MQTT settings with new parameters GET /rest/ntpStatus <code>IS_AUTHENTICATED</code> none Current NTP connection status GET /rest/ntpSettings <code>IS_ADMIN</code> none Current NTP settings POST /rest/ntpSettings <code>IS_ADMIN</code> <code>{\"enabled\": true,\"server\": \"time.google.com\",\"tz_label\": \"Europe/London\",\"tz_format\": \"GMT0BST,M3.5.0/1,M10.5.0\"}</code> Update the NTP settings GET /rest/apStatus <code>IS_AUTHENTICATED</code> none Current AP status and client information GET /rest/apSettings <code>IS_ADMIN</code> none Current AP settings POST /rest/apSettings <code>IS_ADMIN</code> <code>{\"provision_mode\": 1,\"ssid\": \"ESP32-SvelteKit-e89f6d20372c\",\"password\": \"esp-sveltekit\",\"channel\": 1,\"ssid_hidden\": false,\"max_clients\": 4,\"local_ip\": \"4.3.2.1\",\"gateway_ip\": \"4.3.2.1\",\"subnet_mask\": \"255.255.255.0\"}</code> Update AP settings \ud83c\udf19 GET /rest/wifiStatus <code>IS_AUTHENTICATED</code> none Current status of the wifi client connection GET /rest/scanNetworks <code>IS_ADMIN</code> none Async Scan for Networks in Range GET /rest/listNetworks <code>IS_ADMIN</code> none List networks in range after successful scanning. Otherwise triggers scanning. GET /rest/wifiSettings <code>IS_ADMIN</code> none Current WiFi settings POST /rest/wifiSettings <code>IS_ADMIN</code> <code>{\"hostname\":\"esp32-f412fa4495f8\",\"connection_mode\":1,\"wifi_networks\":[{\"ssid\":\"YourSSID\",\"password\":\"YourPassword\",\"static_ip_config\":false}]}</code> Update WiFi settings and credentials GET /rest/systemStatus <code>IS_AUTHENTICATED</code> none Get system information about the ESP. POST /rest/restart <code>IS_ADMIN</code> none Restart the ESP32 POST /rest/factoryReset <code>IS_ADMIN</code> none Reset the ESP32 and all settings to their default values POST /rest/uploadFirmware <code>IS_ADMIN</code> none File upload of firmware.bin POST /rest/signIn <code>NONE_REQUIRED</code> <code>{\"password\": \"admin\",\"username\": \"admin\"}</code> Signs a user in and returns access token GET /rest/securitySettings <code>IS_ADMIN</code> none retrieves all user information and roles POST /rest/securitySettings <code>IS_ADMIN</code> <code>{\"jwt_secret\": \"734cb5bb-5597b722\", \"users\": [{\"username\": \"admin\", \"password\": \"admin\", \"admin\": true}, {\"username\": \"guest\", \"password\": \"guest\", \"admin\": false, }]}</code> retrieves all user information and roles GET /rest/verifyAuthorization <code>NONE_REQUIRED</code> none Verifies the content of the auth bearer token GET /rest/generateToken?username={username} <code>IS_ADMIN</code> <code>{\"token\": \"734cb5bb-5597b722\"}</code> Generates a new JWT token for the user from username POST /rest/sleep <code>IS_AUTHENTICATED</code> none Puts the device in deep sleep mode POST /rest/downloadUpdate <code>IS_ADMIN</code> <code>{\"download_url\": \"https://github.com/theelims/ESP32-sveltekit/releases/download/v0.1.0/firmware_esp32s3.bin\"}</code> Download link for OTA. This requires a valid SSL certificate and will follow redirects. GET /rest/coreDump <code>IS_AUTHENTICATED</code> Text Core dump of the last crash."},{"location":"statefulservice/","title":"Developing with the Framework","text":"<p>The back end is a set of REST endpoints hosted by a PsychicHttp instance. The 'lib/framework' directory contains the majority of the back end code. The framework contains a number of useful utility classes which you can use when extending it. The project also comes with a demo project to give you some help getting started.</p> <p>The framework's source is split up by feature, for example WiFiScanner.h implements the end points for scanning for available networks where as WiFiSettingsService.h handles configuring the WiFi settings and managing the WiFi connection.</p>"},{"location":"statefulservice/#initializing-the-framework","title":"Initializing the framework","text":"<p>The 'src/main.cpp' file constructs the web server and initializes the framework. You can add endpoints to the server here to support your IoT project. The main loop is also accessible so you can run your own code easily.</p> <p>The following code creates the web server and esp32sveltekit framework:</p> <pre><code>PsychicHttpServer server;\nESP32SvelteKit esp32sveltekit(&amp;server, 120);\n</code></pre> <p>ESP32SvelteKit is instantiated with a reference to the server and a number of HTTP endpoints. The underlying ESP-IDF HTTP Server statically allocates memory for each endpoint and needs to know how many there are. Best is to inspect your WWWData.h file for the number of Endpoints from SvelteKit (currently 60), the framework itself has 37 endpoints, and Lighstate Demo has 7 endpoints. Each <code>_server.on()</code> counts as an endpoint. Don't forget to add a couple of spare, just in case. Each HttpEndpoint adds 2 endpoints, if CORS is enabled it adds an other endpoint for the CORS preflight request.</p> <p>Now in the <code>setup()</code> function the initialization is performed:</p> <pre><code>void setup() {\n  // start serial and filesystem\n  Serial.begin(SERIAL_BAUD_RATE);\n\n  // start the framework and demo project\n  esp32sveltekit.begin();\n}\n</code></pre> <p><code>server.begin()</code> is called by ESP32-SvelteKit, as the start-up sequence is crucial.</p>"},{"location":"statefulservice/#stateful-service","title":"Stateful Service","text":"<p>The framework promotes a modular design and exposes features you may re-use to speed up the development of your project. Where possible it is recommended that you use the features the frameworks supplies. These are documented in this section and a comprehensive example is provided by the demo project.</p> <p>The following diagram visualizes how the framework's modular components fit together, each feature is described in detail below.</p> <p></p> <p>The StatefulService.h class is responsible for managing state. It has an API which allows other code to update or respond to updates in the state it manages. You can define a data class to hold state, then build a StatefulService class to manage it. After that you may attach HTTP endpoints, WebSockets or MQTT topics to the StatefulService instance to provide commonly required features.</p> <p>Here is a simple example of a state class and a StatefulService to manage it:</p> <pre><code>class LightState {\n public:\n  bool on = false;\n  uint8_t brightness = 255;\n};\n\nclass LightStateService : public StatefulService&lt;LightState&gt; {\n};\n</code></pre>"},{"location":"statefulservice/#update-handler","title":"Update Handler","text":"<p>You may listen for changes to state by registering an update handler callback. It is possible to remove an update handler later if required.</p> <pre><code>// register an update handler\nupdate_handler_id_t myUpdateHandler = lightStateService.addUpdateHandler(\n  [&amp;](const String&amp; originId) {\n    Serial.print(\"The light's state has been updated by: \");\n    Serial.println(originId);\n  }\n);\n\n// remove the update handler\nlightStateService.removeUpdateHandler(myUpdateHandler);\n</code></pre> <p>An \"originId\" is passed to the update handler which may be used to identify the origin of an update. The default origin values the framework provides are:</p> Origin Description http An update sent over REST (HttpEndpoint) mqtt An update sent over MQTT (MqttEndpoint) websocketserver:{clientId} An update sent over WebSocket (WebSocketServer)"},{"location":"statefulservice/#hook-handler","title":"Hook Handler","text":"<p>Sometimes if can be desired to hook into every update of an state, even if the StateUpdateResult is <code>StateUpdateResult::UNCHANGED</code> and the update handler isn't called. In such cases you can use the hook handler. Similarly it can be removed later.</p> <pre><code>// register an update handler\nhook_handler_id_t myHookHandler = lightStateService.addHookHandler(\n  [&amp;](const String&amp; originId, StateUpdateResult &amp;result) {\n    Serial.printf(\"The light's state has been updated by: %s with result %d\\n\", originId, result);\n  }\n);\n\n// remove the update handler\nlightStateService.removeHookHandler(myHookHandler);\n</code></pre>"},{"location":"statefulservice/#read-update-state","title":"Read &amp; Update State","text":"<p>StatefulService exposes a read function which you may use to safely read the state. This function takes care of protecting against parallel access to the state in multi-core environments such as the ESP32.</p> <pre><code>lightStateService.read([&amp;](LightState&amp; state) {\n  digitalWrite(LED_PIN, state.on ? HIGH : LOW); // apply the state update to the LED_PIN\n});\n</code></pre> <p>StatefulService also exposes an update function which allows the caller to update the state with a callback. This function automatically calls the registered update handlers if the state has been changed. The example below changes the state of the light (turns it on) using the arbitrary origin \"timer\" and returns the \"CHANGED\" state update result, indicating that a change was made:</p> <pre><code>lightStateService.update([&amp;](LightState&amp; state) {\n   if (state.on) {\n    return StateUpdateResult::UNCHANGED; // lights were already on, return UNCHANGED\n  }\n  state.on = true;  // turn on the lights\n  return StateUpdateResult::CHANGED; // notify StatefulService by returning CHANGED\n}, \"timer\");\n</code></pre> <p>There are three possible return values for an update function which are as follows:</p> Origin Description StateUpdateResult::CHANGED The update changed the state, propagation should take place if required StateUpdateResult::UNCHANGED The state was unchanged, propagation should not take place StateUpdateResult::ERROR There was an error updating the state, propagation should not take place"},{"location":"statefulservice/#json-serialization","title":"JSON Serialization","text":"<p>When reading or updating state from an external source (HTTP, WebSockets, or MQTT for example) the state must be marshalled into a serializable form (JSON). SettingsService provides two callback patterns which facilitate this internally:</p> Callback Signature Purpose JsonStateReader void read(T&amp; settings, JsonObject&amp; root) Reading the state object into a JsonObject JsonStateUpdater StateUpdateResult update(JsonObject&amp; root, T&amp; settings) Updating the state from a JsonObject, returning the appropriate StateUpdateResult <p>The static functions below can be used to facilitate the serialization/deserialization of the light state:</p> <pre><code>class LightState {\n public:\n  bool on = false;\n  uint8_t brightness = 255;\n\n  static void read(LightState&amp; state, JsonObject&amp; root) {\n    root[\"on\"] = state.on;\n    root[\"brightness\"] = state.brightness;\n  }\n\n  static StateUpdateResult update(JsonObject&amp; root, LightState&amp; state) {\n    state.on = root[\"on\"] | false;\n    state.brightness = root[\"brightness\"] | 255;\n    return StateUpdateResult::CHANGED;\n  }\n};\n</code></pre> <p>For convenience, the StatefulService class provides overloads of its <code>update</code> and <code>read</code> functions which utilize these functions.</p> <p>Read the state to a JsonObject using a serializer:</p> <pre><code>JsonObject jsonObject = jsonDocument.to&lt;JsonObject&gt;();\nlightStateService-&gt;read(jsonObject, LightState::read);\n</code></pre> <p>Update the state from a JsonObject using a deserializer:</p> <pre><code>JsonObject jsonObject = jsonDocument.as&lt;JsonObject&gt;();\nlightStateService-&gt;update(jsonObject, LightState::update, \"timer\");\n</code></pre>"},{"location":"statefulservice/#http-restful-endpoint","title":"HTTP RESTful Endpoint","text":"<p>The framework provides an HttpEndpoint.h class which may be used to register GET and POST handlers to read and update the state over HTTP. You may construct an HttpEndpoint as a part of the StatefulService or separately if you prefer.</p> <p>The code below demonstrates how to extend the LightStateService class to provide an endpoint:</p> <pre><code>class LightStateService : public StatefulService&lt;LightState&gt; {\n public:\n  LightStateService(PsychicHttpServer* server, ESP32SvelteKit *sveltekit) :\n      _httpEndpoint(LightState::read, LightState::update, this, server, \"/rest/lightState\", sveltekit-&gt;getSecurityManager(),AuthenticationPredicates::IS_AUTHENTICATED) {\n  }\n\n  void begin(); {\n    _httpEndpoint.begin();\n  }\n\n private:\n  HttpEndpoint&lt;LightState&gt; _httpEndpoint;\n};\n</code></pre> <p>Endpoint security is provided by authentication predicates which are documented below. The SecurityManager and authentication predicate must be provided, even if no secure endpoint is required. The placeholder project shows how endpoints can be secured.</p> <p>To register the HTTP endpoints with the web server the function <code>_httpEndpoint.begin()</code> must be called in the custom StatefulService Class' own <code>void begin()</code> function.</p>"},{"location":"statefulservice/#file-system-persistence","title":"File System Persistence","text":"<p>FSPersistence.h allows you to save state to the filesystem. FSPersistence automatically writes changes to the file system when state is updated. This feature can be disabled by calling <code>disableUpdateHandler()</code> if manual control of persistence is required.</p> <p>The code below demonstrates how to extend the LightStateService class to provide persistence:</p> <pre><code>class LightStateService : public StatefulService&lt;LightState&gt; {\n public:\n  LightStateService(ESP32SvelteKit *sveltekit) :\n      _fsPersistence(LightState::read, LightState::update, this, sveltekit-&gt;getFS(), \"/.config/lightState.json\") { // \ud83c\udf19 use /.config (hidden folder)\n  }\n\n private:\n  FSPersistence&lt;LightState&gt; _fsPersistence;\n};\n</code></pre>"},{"location":"statefulservice/#event-socket-endpoint","title":"Event Socket Endpoint","text":"<p>EventEndpoint.h wraps the Event Socket into an endpoint compatible with a stateful service. The client may subscribe and unsubscribe to this event to receive updates or push updates to the ESP32. The current state is synchronized upon subscription.</p> <p>The code below demonstrates how to extend the LightStateService class to provide an WebSocket:</p> <pre><code>class LightStateService : public StatefulService&lt;LightState&gt; {\n public:\n  LightStateService(ESP32SvelteKit *sveltekit) :\n      _eventEndpoint(LightState::read, LightState::update, this, sveltekit-&gt;getSocket(), \"led\") {}\n\n  void begin()\n  {\n    _eventEndpoint.begin();\n  }\n\n private:\n  EventEndpoint&lt;LightState&gt; _eventEndpoint;\n};\n</code></pre> <p>To register the event endpoint with the event socket the function <code>_eventEndpoint.begin()</code> must be called in the custom StatefulService Class' own <code>void begin()</code> function.</p> <p>Since all events run through one websocket connection it is not possible to use the securityManager to limit access to individual events. The security defaults to <code>AuthenticationPredicates::IS_AUTHENTICATED</code>.</p>"},{"location":"statefulservice/#websocket-server","title":"WebSocket Server","text":"<p>WebSocketServer.h allows you to read and update state over a WebSocket connection. WebSocketServer automatically pushes changes to all connected clients when state is updated.</p> <p>The code below demonstrates how to extend the LightStateService class to provide an WebSocket:</p> <pre><code>class LightStateService : public StatefulService&lt;LightState&gt; {\n public:\n  LightStateService(PsychicHttpServer* server, ESP32SvelteKit *sveltekit) :\n      _webSocket(LightState::read, LightState::update, this, server, \"/ws/lightState\", sveltekit-&gt;getSecurityManager(), AuthenticationPredicates::IS_AUTHENTICATED), {\n  }\n\n  void begin() {\n    _webSocketServer.begin();\n  }\n\n private:\n  WebSocketServer&lt;LightState&gt; _webSocketServer;\n};\n</code></pre> <p>WebSocket security is provided by authentication predicates which are documented below. The SecurityManager and authentication predicate must be provided, even if no secure endpoint is required. The placeholder project shows how endpoints can be secured.</p> <p>To register the WS endpoint with the web server the function <code>_webSocketServer.begin()</code> must be called in the custom StatefulService Class' own <code>void begin()</code> function.</p>"},{"location":"statefulservice/#mqtt-client","title":"MQTT Client","text":"<p>The framework includes an MQTT client which can be configured via the UI. MQTT requirements will differ from project to project so the framework exposes the client for you to use as you see fit. The framework does however provide a utility to interface StatefulService to a pair of pub/sub (state/set) topics. This utility can be used to synchronize state with software such as Home Assistant.</p> <p>MqttEndpoint.h allows you to publish and subscribe to synchronize state over a pair of MQTT topics. MqttEndpoint automatically pushes changes to the \"pub\" topic and reads updates from the \"sub\" topic.</p> <p>The code below demonstrates how to extend the LightStateService class to interface with MQTT:</p> <pre><code>class LightStateService : public StatefulService&lt;LightState&gt; {\n public:\n  LightStateService(ESP32SvelteKit *sveltekit) :\n      _mqttEndpoint(LightState::read,\n                  LightState::update,\n                  this,\n                  sveltekit-&gt;getMqttClient(),\n                  \"homeassistant/light/my_light/set\",\n                  \"homeassistant/light/my_light/state\") {\n  }\n\n private:\n  MqttEndpoint&lt;LightState&gt; _mqttEndpoint;\n};\n</code></pre> <p>You can re-configure the pub/sub topics at runtime as required:</p> <pre><code>_mqttEndpoint.configureBroker(\"homeassistant/light/desk_lamp/set\", \"homeassistant/light/desk_lamp/state\");\n</code></pre> <p>The demo project allows the user to modify the MQTT topics via the UI so they can be changed without re-flashing the firmware.</p>"},{"location":"statefulservice/#event-socket","title":"Event Socket","text":"<p>Beside RESTful HTTP Endpoints the Event Socket System provides a convenient communication path between the client and the ESP32. It uses a single WebSocket connection to synchronize state and to push realtime data to the client. The client needs to subscribe to the topics he is interested. Only clients who have an active subscription will receive data. Every authenticated client may make use of this system as the security settings are set to <code>AuthenticationPredicates::IS_AUTHENTICATED</code>.</p>"},{"location":"statefulservice/#message-format","title":"Message Format","text":"<p>The event messages exchanged between the ESP32 and its clients consists of an \"event\" head and the \"data\" payload. For the LightState example a message looks like this in JSON representation:</p> <pre><code>{\n  \"event\": \"led\",\n  \"data\": {\n    \"led_on\": true\n  }\n}\n</code></pre> <p>To save on bandwidth the event message is encoded as binary MessagePack instead of a JSON.</p> <p>To subscribe the client has to send the following message (as MessagePack):</p> <pre><code>{\n  \"event\": \"subscribe\",\n  \"data\": \"analytics\"\n}\n</code></pre>"},{"location":"statefulservice/#emit-an-event","title":"Emit an Event","text":"<p>The Event Socket provides an <code>emitEvent()</code> function to push data to all subscribed clients. This is used by various esp32sveltekit classes to push real time data to the client. First an event must be registered with the Event Socket by calling <code>_socket.registerEvent(\"CustomEvent\");</code>. Only then clients may subscribe to this custom event and you're entitled to emit event data:</p> <pre><code>void emitEvent(String event, JsonObject &amp;jsonObject, const char *originId = \"\", bool onlyToSameOrigin = false);\n</code></pre> <p>The latter function allowing a selection of the recipient. If <code>onlyToSameOrigin = false</code> the payload is distributed to all subscribed clients, except the <code>originId</code>. If <code>onlyToSameOrigin = true</code> only the client with <code>originId</code> will receive the payload. This is used by the EventEndpoint to sync the initial state when a new client subscribes.</p>"},{"location":"statefulservice/#receive-an-event","title":"Receive an Event","text":"<p>A callback or lambda function can be registered to receive an ArduinoJSON object and the originId of the client sending the data:</p> <pre><code>_socket.onEvent(\"CostumEvent\",[&amp;](JsonObject &amp;root, int originId)\n{\n  bool ledState = root[\"led_on\"];\n});\n</code></pre>"},{"location":"statefulservice/#get-notified-on-subscriptions","title":"Get Notified on Subscriptions","text":"<p>Similarly a callback or lambda function may be registered to get notified when a client subscribes to an event:</p> <pre><code>_socket.onSubscribe(\"CostumEvent\",[&amp;](const String &amp;originId)\n{\n  Serial.println(\"New Client subscribed: \" + originId);\n});\n</code></pre> <p>The boolean parameter provided will always be <code>true</code>.</p>"},{"location":"statefulservice/#push-notifications-to-all-clients","title":"Push Notifications to All Clients","text":"<p>It is possibly to send push notifications to all clients by using the Event Socket. These will be displayed as toasts an the client side. Either directly call</p> <pre><code>esp32sveltekit.getNotificationService()-&gt;pushNotification(\"Pushed a message!\", PUSHINFO);\n</code></pre> <p>or keep a local pointer to the <code>EventSocket</code> instance. It is possible to send <code>PUSHINFO</code>, <code>PUSHWARNING</code>, <code>PUSHERROR</code> and <code>PUSHSUCCESS</code> events to all clients.</p>"},{"location":"statefulservice/#security-features","title":"Security features","text":"<p>The framework has security features to prevent unauthorized use of the device. This is driven by SecurityManager.h.</p> <p>On successful authentication, the /rest/signIn endpoint issues a JSON Web Token (JWT) which is then sent using Bearer Authentication. For this add an <code>Authorization</code>-Header to the request with the Content <code>Bearer {JWT-Secret}</code>. The framework come with built-in predicates for verifying a users access privileges. The built in AuthenticationPredicates can be found in SecurityManager.h and are as follows:</p> Predicate Description NONE_REQUIRED No authentication is required. IS_AUTHENTICATED Any authenticated principal is permitted. IS_ADMIN The authenticated principal must be an admin. <p>You can use the security manager to wrap any request handler function with an authentication predicate:</p> <pre><code>server-&gt;on(\"/rest/someService\", HTTP_GET,\n  _securityManager-&gt;wrapRequest(std::bind(&amp;SomeService::someService, this, std::placeholders::_1), AuthenticationPredicates::IS_AUTHENTICATED)\n);\n</code></pre> <p>In case of a websocket connection the JWT token is supplied as a search parameter in the URL when establishing the connection:</p> <pre><code>/ws/lightState?access_token={JWT Token}\n</code></pre>"},{"location":"statefulservice/#placeholder-substitution","title":"Placeholder substitution","text":"<p>Various settings support placeholder substitution, indicated by comments in factory_settings.ini. This can be particularly useful where settings need to be unique, such as the Access Point SSID or MQTT client id. Strings must be properly escaped in the ini-file. The following placeholders are supported:</p> Placeholder Substituted value #{platform} The microcontroller platform, e.g. \"esp32\" or \"esp32c3\" #{unique_id} A unique identifier derived from the MAC address, e.g. \"~~0b0a859d~~6816\" \ud83c\udf19 #{random} A random number encoded as a hex string, e.g. \"55722f94\" <p>You may use SettingValue::format in your own code if you require the use of these placeholders. This is demonstrated in the demo project:</p> <pre><code>  static StateUpdateResult update(JsonObject&amp; root, LightMqttSettings&amp; settings) {\n    settings.mqttPath = root[\"mqtt_path\"] | SettingValue::format(\"homeassistant/light/#{unique_id}\");\n    settings.name = root[\"name\"] | SettingValue::format(\"light-#{unique_id}\");\n    settings.uniqueId = root[\"unique_id\"] | SettingValue::format(\"light-#{unique_id}\");\n    return StateUpdateResult::CHANGED;\n  }\n</code></pre>"},{"location":"statefulservice/#accessing-settings-and-services","title":"Accessing settings and services","text":"<p>The framework supplies access to various features via getter functions:</p> SettingsService Description getFS() The filesystem used by the framework getSecurityManager() The security manager - detailed above getSecuritySettingsService() Configures the users and other security settings getWiFiSettingsService() Configures and manages the WiFi network connection getAPSettingsService() Configures and manages the Access Point getNTPSettingsService() Configures and manages the network time getMqttSettingsService() Configures and manages the MQTT connection getMqttClient() Provides direct access to the MQTT client instance getNotificationEvents() Lets you send push notifications to all clients getSleepService() Send the ESP32 into deep sleep getBatteryService() Update battery information on the client <p>The core features use the StatefulService.h class and therefore you can change settings or observe changes to settings through the read/update API.</p> <p>Inspect the current WiFi settings:</p> <pre><code>esp32sveltekit.getWiFiSettingsService()-&gt;read([&amp;](WiFiSettings&amp; wifiSettings) {\n  Serial.print(\"The ssid is:\");\n  Serial.println(wifiSettings.ssid);\n});\n</code></pre> <p>Configure the WiFi SSID and password manually:</p> <pre><code>esp32sveltekit.getWiFiSettingsService()-&gt;update([&amp;](WiFiSettings&amp; wifiSettings) {\n  wifiSettings.ssid = \"MyNetworkSSID\";\n  wifiSettings.password = \"MySuperSecretPassword\";\n  return StateUpdateResult::CHANGED;\n}, \"myapp\");\n</code></pre> <p>Observe changes to the WiFiSettings:</p> <pre><code>esp32sveltekit.getWiFiSettingsService()-&gt;addUpdateHandler(\n  [&amp;](const String&amp; originId) {\n    Serial.println(\"The WiFi Settings were updated!\");\n  }\n);\n</code></pre>"},{"location":"statefulservice/#other-functions-provided","title":"Other functions provided","text":""},{"location":"statefulservice/#mdns-instance-name","title":"MDNS Instance Name","text":"<p>ESP32 SvelteKit uses mDNS / Bonjour to advertise its services into the local network. You can set the mDNS instance name property by calling</p> <pre><code>esp32sveltekit.setMDNSAppName(\"ESP32 SvelteKit Demo App\");\n</code></pre> <p>making the entry a little bit more verbose. This must be called before <code>esp32sveltekit.begin();</code>. If you want to advertise further services just include <code>#include &lt;ESPmNDS.h&gt;</code> and use <code>MDNS.addService()</code> regularly.</p>"},{"location":"statefulservice/#use-esp32-sveltekit-loop-function","title":"Use ESP32-SvelteKit loop() Function","text":"<p>Under some circumstances custom services might want to do something periodically. One solution would be to use a dedicated task or RTOS timer for this. Or you can leverage the ESP32-SvelteKit loop-function and have it executed as a callback every 20ms.</p> <pre><code>esp32sveltekit.addLoopFunction(callback)\n</code></pre>"},{"location":"statefulservice/#factory-reset","title":"Factory Reset","text":"<p>A factory reset can not only be evoked from the API, but also by calling</p> <pre><code>esp32sveltekit.factoryReset();\n</code></pre> <p>from your code. This will erase the complete settings folder, wiping out all settings. This can be a last fall back mode if somebody has forgotten his credentials.</p>"},{"location":"statefulservice/#recovery-mode","title":"Recovery Mode","text":"<p>There is also a recovery mode present which will force the creation of an access point. By calling</p> <pre><code>esp32sveltekit.recoveryMode();\n</code></pre> <p>will force a start of the AP regardless of the AP settings. It will not change the the AP settings. To exit the recovery mode restart the device or change the AP settings in the UI.</p>"},{"location":"statefulservice/#power-down-with-deep-sleep","title":"Power Down with Deep Sleep","text":"<p>This API service can place the ESP32 in the lowest power deep sleep mode consuming only a few \u00b5A. It uses the EXT1 wakeup source, so the ESP32 can be woken up with a button or from a peripherals interrupt. Consult the ESP-IDF Api Reference which GPIOs can be used for this. The RTC will also be powered down, so an external pull-up or pull-down resistor is required. It is not possible to persist variable state through the deep sleep. To optimize the deep sleep power consumption it is advisable to use the callback function to put pins with external pull-up's or pull-down's in a special isolated state to prevent current leakage. Please consult the ESP-IDF Api Reference for this.</p> <p>The settings wakeup pin definition and the signal polarity need to be defined in factory_settings.ini:</p> <pre><code>; Deep Sleep Configuration\n-D WAKEUP_PIN_NUMBER=38 ; pin number to wake up the ESP\n-D WAKEUP_SIGNAL=0 ; 1 for wakeup on HIGH, 0 for wakeup on LOW\n</code></pre> <p>In addition it is possible to change this as well at runtime by calling:</p> <pre><code>esp32sveltekit.getSleepService()-&gt;setWakeUpPin(int pin, bool level, pinTermination termination = pinTermination::FLOATING);\n</code></pre> <p>With this function it is also possible to configure the internal pull-up or pull-down resistor for this RTC pin. Albeit this might increase the deep sleep current slightly.</p> <p>A callback function can be attached and triggers when the ESP32 is requested to go into deep sleep. This allows you to safely deal with the power down event. Like persisting software state by writing to the flash, tiding up or notify a remote server about the immanent disappearance.</p> <pre><code>esp32sveltekit.getSleepService()-&gt;attachOnSleepCallback();\n</code></pre> <p>Also the code can initiate the power down deep sleep sequence by calling:</p> <pre><code>esp32sveltekit.getSleepService()-&gt;sleepNow();\n</code></pre>"},{"location":"statefulservice/#battery-state-of-charge","title":"Battery State of Charge","text":"<p>A small helper class let's you update the battery icon in the status bar. This is useful if you have a battery operated IoT device. It must be enabled in features.ini. It uses the Event Socket and exposes two functions that can be used to update the clients.</p> <pre><code>esp32sveltekit.getBatteryService()-&gt;updateSOC(float stateOfCharge); // update state of charge in percent (0 - 100%)\nesp32sveltekit.getBatteryService()-&gt;setCharging(boolean isCharging); // notify the client that the device is charging\n</code></pre> <p> For devices where battery voltage is exposed on a pin you can measure the voltage and updateSOC by specifying this in platformio.ini:</p> <pre><code>    -D BATTERY_PIN=35 ; Used if FT_BATTERY=1\n    -D BATTERY_MV=4200 ; Used if FT_BATTERY=1\n</code></pre> <p>For other devices (like I2C fuel gauge IC's) you have to implement your own measure code.</p>"},{"location":"statefulservice/#esp32-sveltekit-connection-status","title":"ESP32-SvelteKit Connection Status","text":"<p>Especially for a cases like a colored status LED it can be useful to have a quick indication of the connection status. By calling:</p> <pre><code>ConnectionStatus status = esp32sveltekit.getConnectionStatus();\n</code></pre> <p>the current connection status can be accessed. The following stats are available:</p> Status Description OFFLINE Device is completely offline AP Access Point is available, but no client is connected AP_CONNECTED Access Point is used and at least 1 client is connected STA Device connected to a WiFi Station STA_CONNECTED Device connected to a WiFi Station and at least 1 client is connected STA_MQTT Device connected to a WiFi Station and the device is connected to a MQTT server"},{"location":"statefulservice/#custom-features","title":"Custom Features","text":"<p>You may use the compile time feature service also to enable or disable custom features at runtime and thus control the frontend. A custom feature can only be added during initializing the ESP32 and ESP32-SvelteKit. The frontend queries the features only when first loading the page. Thus the frontend must be refreshed for the changes to become effective.</p> <pre><code>esp32sveltekit.getFeatureService()-&gt;addFeature(\"custom_feature\", true); // or false to disable it\n</code></pre>"},{"location":"statefulservice/#ota-firmware-updates","title":"OTA Firmware Updates","text":"<p>ESP32-SvelteKit offers two different ways to roll out firmware updates to field devices. If the frontend should be updated as well it is necessary to embed it into the firmware binary by activating <code>-D EMBED_WWW</code>.</p>"},{"location":"statefulservice/#firmware-upload","title":"Firmware Upload","text":"<p>Enabling <code>FT_UPLOAD_FIRMWARE=1</code> in features.ini creates a REST endpoint that one can post a firmware binary to. The frontend has a file drop zone to upload a new firmware binary from the browser.</p>"},{"location":"statefulservice/#firmware-download-from-update-server","title":"Firmware Download from Update Server","text":"<p>By enabling <code>FT_DOWNLOAD_FIRMWARE=1</code> in features.ini one can POST a link to a firmware binary which is downloaded for the OTA process. This feature requires SSL and is thus dependent on <code>FT_NTP=1</code>. The Frontend contains an implementation which uses GitHub's Releases section as the update server. By specifying a firmware version in platformio.ini one can make use of semantic versioning to determine the correct firmware:</p> <pre><code>    -D BUILD_TARGET=\"$PIOENV\"\n    -D APP_NAME=\\\"ESP32-Sveltekit\\\" ; Must only contain characters from [a-zA-Z0-9-_] as this is converted into a filename\n    -D APP_VERSION=\\\"0.5.9.3\\\" ; semver compatible version string\n</code></pre> <p>A build script copies the firmware binary files for all build environment to <code>build/firmware</code>. It renames them into <code>{APP_NAME}_{$PIOENV}_{APP_VERSION}.bin</code>. It also creates a MD5 checksum file for verification during the OTA process. These files can be used as attachment on the GitHub release pages.</p> <p>Info</p> <p>This feature could be unstable on single-core members of the ESP32 family.</p>"},{"location":"statefulservice/#custom-update-server","title":"Custom Update Server","text":"<p>If Github is not desired as the update server this can be easily modified to any other custom server. The REST API will accept any valid HTTPS-Link. However, SSL is mandatory and may require a different Root CA Certificate then Github to validate correctly. Follow the instructions here how to change the SSL CA Certificate.</p> <p>If you use a custom update server you must also adapt the frontend code to suit your needs.</p>"},{"location":"stores/","title":"Stores","text":""},{"location":"stores/#user","title":"User","text":"<p>The user store holds the current users credentials, if the security features are enabled. Just import it as you would use with any svelte store:</p> <pre><code>import { user } from \"$lib/stores/user\";\n</code></pre> <p>You can subscribe to it like to any other store with <code>$user</code> and it has the following properties:</p> Property Type Description <code>$user.bearer_token</code> <code>String</code> The JWT token to authorize a user at the back end <code>$user.username</code> <code>String</code> Username of the current user <code>$user.admin</code> <code>Boolean</code> <code>true</code> if the current user has admin privileges <p>In addition to the properties it provides two methods for initializing the user credentials and to invalidate them. <code>user.init()</code> takes a valid JWT toke as an argument and extracts the user privileges and username from it. <code>user.invalidate()</code> invalidates the user credentials and redirects to the login pages</p> <p>User credentials are stored in the browsers local storage</p> <p>The user credentials including the JWT token are stored in the browsers local storage. Any javascript executed on the browser can access this making it extremely vulnerable to XSS attacks. Also the HTTP connection between ESP32 and front end is not encrypted making it possible for everyone to read the JWT token in the same network. Fixing these severe security issues is on the todo list for upcoming releases.</p>"},{"location":"stores/#event-socket","title":"Event Socket","text":"<p>The Event Socket System is conveniently provided as a Svelte store. Import the store, subscribe to the data interested with <code>socket.on</code>. To unsubscribe simply call <code>socket.off</code>. Data can be sent to the ESP32 by calling <code>socket.sendEvent</code></p> <pre><code>import { socket } from \"$lib/stores/socket\";\n\nlet lightState: LightState = { led_on: false };\n\nonMount(() =&gt; {\n  socket.on&lt;LightState&gt;(\"led\", (data) =&gt; {\n    lightState = data;\n  });\n});\n\nonDestroy(() =&gt; socket.off(\"led\"));\n\nsocket.sendEvent(\"led\", lightState);\n</code></pre> <p>Subscribing to an invalid event will only create a warning in the ESP_LOG on the serial console of the ESP32.</p>"},{"location":"stores/#telemetry","title":"Telemetry","text":"<p>The telemetry store can be used to update telemetry data like RSSI via the Event Socket system.</p> <pre><code>import { telemetry } from \"$lib/stores/telemetry\";\n</code></pre> <p>It exposes the following properties you can subscribe to:</p> Property Type Description <code>$telemetry.rssi.rssi</code> <code>Number</code> The RSSI signal strength of the WiFi in dBm <code>$telemetry.rssi.ssid</code> <code>String</code> Name of the connected WiFi station <code>$telemetry.rssi.connected</code> <code>Boolean</code> Connection status of the WiFi <code>$telemetry.battery.soc</code> <code>Number</code> Battery state of charge <code>$telemetry.battery.charging</code> <code>Boolean</code> Is battery connected to charger <code>$telemetry.battery.voltage</code> <code>Number</code> Energy voltage \ud83c\udf19 <code>$telemetry.battery.current</code> <code>Number</code> Energy current \ud83c\udf19 <code>$telemetry.download_ota.status</code> <code>String</code> Status of OTA <code>$telemetry.download_ota.progress</code> <code>Number</code> Progress of OTA <code>$telemetry.download_ota.error</code> <code>String</code> Error Message of OTA"},{"location":"stores/#analytics","title":"Analytics","text":"<p>The analytics store holds a log of heap and other debug information via the Event Socket system.</p> <pre><code>import { analytics } from \"$lib/stores/analytics\";\n</code></pre> <p>It exposes an array of the following properties you can subscribe to:</p> Property Type Description <code>$analytics.uptime</code> <code>Number</code> Uptime of the chip in seconds since last reset <code>$analytics.free_heap</code> <code>Number</code> Current free heap <code>$analytics.min_free_heap</code> <code>Number</code> Minimum free heap that has been <code>$analytics.max_alloc_heap</code> <code>Number</code> Biggest continues free chunk of heap <code>$analytics.fs_used</code> <code>Number</code> Bytes used on the file system <code>$analytics.fs_total</code> <code>Number</code> Total bytes of the file system <code>$analytics.core_temp</code> <code>Number</code> Core temperature (on some chips) <p>By default there is one data point every 2 seconds. It holds 1000 data points worth roughly 33 Minutes of data.</p>"},{"location":"structure/","title":"Customizing the Front End","text":"<p>The actual code for the front end is located under interface/src/ and divided into the \"routes\" folder and a \"lib\" folder for assets, stores and components.</p> Resource Description routes/ Root of the routing system routes/connections/ Setting and status pages for MQTT, NTP, etc. routes/demo/ The lightstate demo routes/system/ Status page for ESP32 and OTA settings routes/user/ Edit and add users and change passwords routes/wifi/ Status and settings for WiFi station and AP lib/ Library folder for stores, components and assets lib/assets/ Assets like pictures lib/components/ Reusable components like modals, password input or collapsible lib/stores Svelte stores for common access to data"},{"location":"structure/#features","title":"Features","text":"<p>The back end provides a JSON which features of the back end are enabled by the feature selection. It is fetched with the page load and made available in the <code>pages</code>-store and can be accessed on any site with <code>page.data.features</code>. It is used to hide any disabled setting element.</p>"},{"location":"structure/#delete-demo-project","title":"Delete <code>demo/</code> Project","text":"<p>The light state demo project is included by default to demonstrate the use of the backend and front end. It demonstrates the use of the MQTT-API, websocket API and REST API to switch on the build in LED of the board. routes/connections/mqtt/MQTTConfig.svelte is also part of the 'demo/' Project. You can reuse this to set your own MQTT topics, or delete it. Do not forget to adjust <code>+page.svelte</code> as well. Use it as an example how to create your own custom API and access it from the front end. It can be deleted safely after it has been removed from the menu as well.</p>"},{"location":"structure/#create-your-root-pagesvelte","title":"Create your root <code>+page.svelte</code>","text":"<p>The root page of the front end is located under routes/+page.svelte. This should be the central place of your app and can be accessed at any time by pressing the logo and app name in the side menu. Just override it to suit your needs.</p>"},{"location":"structure/#customize-the-main-menu","title":"Customize the Main Menu","text":"<p>The main menu is located in routes/menu.svelte as a svelte component and defines the main menu including a menu footer.</p>"},{"location":"structure/#menu-footer","title":"Menu Footer","text":"<p>The main menu comes with a small footer to add your copyright notice plus links to github and your discord server where users can find help. The <code>active</code>-flag is used to disable an element in the UI. Most of these global parameters are set in the routes/+layout.ts.</p> <pre><code>const discord = { href: \".\", active: false };\n</code></pre>"},{"location":"structure/#menu-structure","title":"Menu Structure","text":"<p>The menu consists of an array of menu items. These are defined as follows:</p> <pre><code>{\n    title: 'Demo App',\n    icon: Control,\n    href: '/demo',\n    feature: page.data.features.project,\n},\n</code></pre> <ul> <li>Where <code>title</code> refers to the page title. It must be identical to <code>page.data.title</code> as defined in the <code>+page.ts</code> in any of your routes. If they do not match the corresponding menu item is not highlighted on first page load or a page refresh. </li> </ul> <p></p> <p>Info</p> <p>\ud83d\udea8 \ud83c\udf19: In MoonBase matching is not done on title but on href, which is not compared with page.ts title but with page.url.pathname + page.url.search (see Menu.svelte)</p> <p>A minimum <code>+page.ts</code> looks like this:</p> <pre><code>import type { PageLoad } from \"./$types\";\n\nexport const load = (async ({ fetch }) =&gt; {\n  return {\n    title: \"Demo App\",\n  };\n}) satisfies PageLoad;\n</code></pre> <ul> <li><code>icon</code> must be an icon component giving the menu items icon.</li> <li><code>href</code> is the link to the route the menu item refers to.</li> <li><code>feature</code> takes a bool and should be set to <code>true</code>. It is used by the feature selector to hide a menu entry of it is not present on the back end.</li> </ul>"},{"location":"structure/#advanced-customizations","title":"Advanced Customizations","text":"<p>On the root level there are two more files which you can customize to your needs.</p>"},{"location":"structure/#login-page","title":"Login Page","text":"<p><code>login.svelte</code> is a component showing the login screen, when the security features are enabled. By default it shows the app's logo and the login prompt. Change it as you need it.</p>"},{"location":"structure/#status-bar","title":"Status Bar","text":"<p><code>statusbar.svelte</code> contains the top menu bar which you can customize to show state information about your app and IoT device. By default it shows the active menu title and the hamburger icon on small screens.</p>"},{"location":"structure/#github-firmware-update","title":"Github Firmware Update","text":"<p>If the feature <code>FT_DOWNLOAD_FIRMWARE</code> is enabled, ESP32 SvelteKit pulls the Github Release section through the Github API for firmware updates once per hour. Also the firmware update menu shows all available firmware releases allowing the user to up- and downgrade has they please. If you're using the Github releases section you must first tell the frontend your correct path to your github repository as described here.</p> <p>Also you must make use of couple build flags in platformio.ini:</p> <pre><code>    -D BUILD_TARGET=\\\"$PIOENV\\\"\n    -D APP_NAME=\\\"ESP32-Sveltekit\\\" ; Must only contain characters from [a-zA-Z0-9-_] as this is converted into a filename\n    -D APP_VERSION=\\\"0.5.9.3\\\" ; semver compatible version string\n</code></pre> <p>Out of these flags the rename_fw.py script will copy and rename the firmware binary to <code>/build/firmware/{APP_NAME}_{$PIOENV}_{APP_VERSION}.bin</code>. In addition it will also create a corresponding MD5 checksum file. These files are ready to be uploaded to the Github release page without any further changes. The frontend searches for the firmware binary which matches the build environment and uses this as the update link. This allows you to serve different build targets (e.g. different boards) from the same release page.</p>"},{"location":"structure/#custom-update-server","title":"Custom Update Server","text":"<p>The frontend and backend code can be easily adjusted to suit a custom update server. For the backend the changes are described here. On the frontend only two files must be adapted and changed to switch to a custom update server: /lib/components/UpdateIndicator.svelte and /routes/system/update/GithubFirmwareManager.svelte.</p> <p>Info</p> <p>The update server must provide the firmware download through SSL encryption.</p>"},{"location":"sveltekit/","title":"Getting Started with SvelteKit","text":"<p>SvelteKits unique approach makes it perfect suitable for constraint server. It builds very small files shipping only the minimum required amount of java script. This keeps the memory footprint low so that rich applications can be build with just the 4MB flash of many ESP32 chips.</p> <p>However, since SvelteKit is designed with server-side rendering first, there are some catches and pitfalls one must avoid. Especially as nearly all tutorials found on SvelteKit heavily make use of the combined front and back end features.</p>"},{"location":"sveltekit/#limitations-of-adapter-static","title":"Limitations of <code>adapter-static</code>","text":"<p>To build a website that can be served from an ESP32 <code>adapter-static</code> is used. This means no server functions can be used. The front end is build as a Single-Page Application (SPA) instead. However, SvelteKit will pre-render sites at build time, even if SSR and pre-rendering are disabled. This leads to some restrictions that must be taken into consideration:</p> <ul> <li> <p>You can't use any server-side logic like <code>+page.server.ts</code>, <code>+layout.server.ts</code> or <code>+server.ts</code> files in your project.</p> </li> <li> <p>The load function in <code>+page.ts</code> gets executed on the server and the client. If you try to access browser resources in the load function this will fail. Use a more traditional way like fetching the data in the <code>+page.svelte</code> with the <code>onMount(() =&gt; {})</code> callback.</p> </li> </ul>"},{"location":"sveltekit/#customizing-and-theming","title":"Customizing and Theming","text":""},{"location":"sveltekit/#changing-the-app-name","title":"Changing the App Name","text":"<p>+layout.ts bundles a few globally customizable properties like github repository, app name and copyright notice:</p> <pre><code>export const load = (async () =&gt; {\n    const result = await fetch('/rest/features');\n    const item = await result.json();\n    return {\n        features: item,\n        title: 'ESP32-SvelteKit',\n        github: 'theelims/ESP32-sveltekit',\n        copyright: '2025 theelims',\n        appName: 'ESP32 SvelteKit'\n    };\n}) satisfies LayoutLoad;\n</code></pre> <p>In menu.svelte there is additionally the possibility to add a discord invite, which is disabled by default.</p> <pre><code>const discord = { href: \".\", active: false };\n</code></pre> <p>There is also a manifest file which contains the app name to use when adding the app to a mobile device, so you may wish to also edit interface/static/manifest.json:</p> <pre><code>{\n  \"name\": \"ESP32 SvelteKit\",\n  \"icons\": [\n    {\n      \"src\": \"/favicon.png\",\n      \"sizes\": \"48x48 72x72 96x96 128x128 256x256\"\n    }\n  ],\n  \"start_url\": \"/\",\n  \"display\": \"fullscreen\",\n  \"orientation\": \"any\"\n}\n</code></pre>"},{"location":"sveltekit/#changing-the-app-icon-and-favicon","title":"Changing the App Icon and Favicon","text":"<p>You can replace the apps favicon which is located at interface/static/favicon.png with one of your preference. A 256 x 256 PNG is recommended for best compatibility.</p> <p>Also the Svelte Logo can be replaced with your own. It is located under interface/src/lib/assets/logo.png.</p>"},{"location":"sveltekit/#daisy-ui-themes","title":"Daisy UI Themes","text":"<p>The overall theme of the front end is defined by DaisyUI and can be easily changed according to their documentation. Either by selecting one of the standard themes of DaisyUI, or creating your own. By default the <code>corporate</code> and <code>business</code> for dark are defined in app.css:</p> <pre><code>@plugin \"daisyui\" {\n    themes: corporate --default, business --prefersdark;\n}\n</code></pre>"},{"location":"sveltekit/#opinionated-use-of-shadows","title":"Opinionated use of Shadows","text":"<p>The front end makes some use of colored shadows with the <code>shadow-primary</code> and <code>shadow-secondary</code> DaisyUI classes. Just use the search and replace function to change this to a more neutral look, if you find the color too much.</p>"},{"location":"sveltekit/#color-scheme-helper","title":"Color Scheme Helper","text":"<p>Some JS modules do not accept DaisyUI/TailwindCSS color class names. A small helper function can be imported and used to convert any CSS variable name for a DaisyUI color into OKCHL. That way modules like e.g. Charts.js can be styled in the current color scheme in a responsive manner.</p> <pre><code>import { daisyColor } from \"$lib/DaisyUiHelper\";\n\nborderColor: daisyColor('--color-primary'),\nbackgroundColor: daisyColor('--color-primary', 50),\n</code></pre>"},{"location":"sveltekit/#ts-types-definition","title":"TS Types Definition","text":"<p>All types used throughout the front end are exported from models.ts. It is a convenient location to add your custom types once you expand the front end.</p>"},{"location":"develop/development/","title":"Development","text":""},{"location":"develop/development/#summary","title":"Summary","text":"<ul> <li>Create a branch</li> <li>Make changes</li> <li>Document your change</li> <li>Submit a pull request</li> <li>Develop principles: Checklist before submitting a request.</li> </ul>"},{"location":"develop/development/#create-a-branch","title":"Create a branch","text":"<ul> <li> <p>Want to make changes: fork the repo (see installation)and submit pull requests, see creating-a-pull-request-from-a-fork:</p> <ul> <li>Press Branches, press New Branch, give it a name e.g. background-script and press Create new Branch, click on background-script</li> </ul> <p></p> </li> </ul>"},{"location":"develop/development/#make-changes","title":"Make changes","text":""},{"location":"develop/development/#front-end-ui","title":"Front End (UI)","text":"<ul> <li>interface folder<ul> <li>interface/src/routes/moonbase for MoonBase and MoonLight (modules)</li> </ul> </li> <li>see Prepare for development about nodejs, npm install</li> </ul> <pre><code>npm install\nnpm run dev\n</code></pre> <ul> <li>see Troubleshooting about WWWData.h</li> </ul>"},{"location":"develop/development/#back-end-server","title":"Back End (Server)","text":"<p>There are 3 levels to add functionality:</p> <ul> <li>Standard ESP32-Sveltekit code, e.g. Connections, Wifi and System. MoonBase files is also made using standard sveltekit as example but contains a few components used in MoonLight modules. Might be rewriteen as MoonLight Module in the future.</li> <li>lib folder for Sveltekit back end</li> <li>Read the ESP32 Sveltekit docs</li> <li>MoonLight Modules e.g. Lights Control, Effects, Info, Channels. They are subclasses of Modules.h/cpp and implement setupDefinition, onUpdate and optional loop. New modules need to be defined in main.cpp and added to menu.svelte. All further UI is generated by Module.svelte.</li> <li>src folder for MoonBase and MoonLight back end</li> <li>MoonLight Nodes: the easiest and recommended way. See Effects.h, Layouts.h, Modifiers.h and Drivers.h for examples. They match closest WLED usermods. Each node has controls, a setup and a loop and can be switched on and off. For specific purposes hasOnLayout() and hasModifier() can return true.</li> <li>src/MoonLight/nodes</li> </ul>"},{"location":"develop/development/#steps","title":"Steps","text":"<ul> <li>Go to the file(s) you want to change press edit and make the changes. </li> <li>\u2611\ufe0f and \u27a1\ufe0f to build and or upload</li> <li>Changes made to the UI are not always visible in the browser, clear the browser cache to see latest UI (see connect to MoonLight).</li> <li>MoonLight uses clang-format for c/c++ code and prettier for Svelte, javascript etc. Format your code before submitting! (right click Format Document on each page you change)</li> <li>Press Commit Changes..., enter a commit message and an extended description, Press Commit Changes</li> </ul>"},{"location":"develop/development/#document-your-changes","title":"Document your changes","text":"<p>See Documentation</p>"},{"location":"develop/development/#submit-a-pull-request","title":"Submit a pull request","text":"<pre><code>* Go back to the homepage of your fork [myfork/MoonLight](https://github.com/ewowi/MoonLight). There is a message inviting to create a Pull Request. Press Compare &amp; pull request.\n\n  &lt;img width=\"350\" alt=\"Screenshot 2025-04-15 at 14 59 15\" src=\"https://github.com/user-attachments/assets/410aa517-99eb-4907-b1a3-db7f38abb194\" /&gt;\n\n* Add a title and Description to the Pull Request and press Create Pull Request\n\n* The upstream MoonLight repo can now process this PR\n</code></pre>"},{"location":"develop/development/#addtional-info","title":"Addtional info","text":""},{"location":"develop/development/#emoji-coding","title":"Emoji coding","text":"<ul> <li>Serial Log shows which code is from which library using emoji:</li> </ul> <pre><code>* \ud83d\udc3c: ESP-SvelteKit\n* \ud83d\udd2e: PsychicHTTP\n* \ud83d\udc38: Live Scripts\n* \ud83c\udf19: MoonBase\n* \ud83d\udcab: MoonLight\n\ud83c\udf19 and \ud83d\udcab is also used in code comments of ESP32-SvelteKit to show where changes to upstream have been made.\n</code></pre> <ul> <li>The following ESP32-SvelteKit features have been switched off in the default builts (they can be switched on if you want to use them, see features.ini)<ul> <li>-D FT_SECURITY=0</li> <li>~~-D FT_SLEEP=1~~ enabled!</li> <li>~~-D FT_BATTERY=1~~ enabled!</li> </ul> </li> </ul>"},{"location":"develop/development/#ui-development-server","title":"UI development server","text":"<p>To ease the frontend development you can deploy the back end code on an ESP32 board and pass the websocket and REST API calls through the development server's proxy running on your computer.</p> <p>This very much speeds up UI development as no flashing to ESP32 is required to test updated UI. Svaing an UI file is enough to see the results!!!</p> <p>See Setup Proxy for Development and development-server how to setup.</p> <p>nodejs</p> <p>if nodejs is not installed yet: see Prepare for development to install nodejs</p> <p>After configuring the development server, a local webserver starts on localhost:5173. </p>"},{"location":"develop/development/#release-and-merged-firmware-binaries","title":"Release and merged firmware binaries","text":"<p>Firmware binaries come in 2 flavours: including boot and partition (merged) and MoonLight code only (release). They are stored in the build folder of the MoonLight repo and updated each time a build or upload (\u2611\ufe0f or \u27a1\ufe0f) is done. Subfolder merged contains the first type, release the second type.</p> <ul> <li>Merged bins are used by the web installer, release bins by the System update module (OTA). System update uses the bins stored in GitHub releases.</li> <li>Merged bins starts flashing on address 0x0, release bins on address 0x10000.</li> <li>All MoonLight partition schemes have a firmware size of 3MB. Smaller devices (e.g. ESP32-D0) have no OTA partition. System update is possible in this situation, but there is no fallback if update fails (need to flash using USB in that case) \ud83d\udea7</li> </ul> <p>flash firmware using esptool</p> <ul> <li>[&gt;_] in the statusbar of vscode  <pre><code>esptool --port /dev/cu.usbmodem11201 write-flash 0x0 ./build/merged/MoonLight_esp32-s3-devkitc-1-n16r8v_0-5-9-3_webflash.bin\n</code></pre></li> <li>optionally add erase-flash before write-flash</li> <li>use ./build/release/MoonLight_esp32-s3-devkitc-1-n16r8v_0-5-9-3.bin and address 0x10000 to flash only the MoonLight partition</li> </ul>"},{"location":"develop/development/#adding-an-esp32-device-definition","title":"Adding an ESP32 device Definition","text":"<p>Before starting, ensure you have the datasheet of your particular chip and ESP32-device confirmed and available. Many modules have near-identical markings that can hide varying hardware.</p> <p>There are 3 files to consider when making a ESP32-device definition.</p> <pre><code>boards/BOARD_NAME.csv\nboards/BOARD_NAME.JSON\nfirmware/BOARD_TYPE_NAME.ini (e.g. esp32dev, esp32-s3), contains different boards\n</code></pre>"},{"location":"develop/development/#develop-principles","title":"Develop principles","text":"<ul> <li>One firmware per board containing everything, to keep management of firmware simple - for everybody. 3MB flash space to allow for this.</li> <li>Clang-format and Prettier for unified layout of code (right click format document in VSCode)</li> <li>Part of submitting a change via a pull request is updated documentation. Functionality and documentation should be in one Pull Request </li> <li>Make minimal changes in upstream (Sveltekit) code, as we need to stay in sync as easy as possible. Add // \ud83c\udf19 to show a change has been made.</li> <li>The main branch is the source to branch and merge to, no direct code commits to the main branch. As the main branch docs folder is the source for the website, doc changes can be made directly to main. </li> <li>The dev branch is used for latest updates between releases. Optionally branch from dev if latest updates are needed for a change.</li> <li>The src folder is for all MoonBase and MoonLight Nodes and Modules development. No need for UI changes as that is generated for Nodes and Modules. The lib folder is for upstream (Sveltekit). The interface folder is for UI, mainly Sveltekit and Modules and Nodes generic functions.</li> <li>A pull request should contain compilable code and tested to not crash the system at minimal and support also boards without PSRAM, e.g. ESP32-D0. Code may be work in progress.</li> </ul>"},{"location":"develop/documentation/","title":"Documentation","text":""},{"location":"develop/documentation/#overview","title":"Overview","text":"<p>A software project includes its functional aspects and the knowledge surrounding it. Document your experience to make it easier to have fun making things and to get engaged in improving the project.</p> <p>Documentation of MoonLight is also included in the MoonLight repository, see the docs folder. Fomat of documentation is mkdocs, see below. Part of submitting a change via a pull request is updated documentation. Functionality and documentation should be in one Pull Request After the pull request is accepted, the documentation shows up in this MoonLight website.</p> <p>Store technical documentation directly in the code. Functional documentation as follows:</p>"},{"location":"develop/documentation/#adding-or-changing-nodes","title":"Adding or changing Nodes","text":"<p>If you create or change a node, create or change the node in the overview tables of the node type (Effects, Modifiers, Layers, Drivers). Each row in the table looks as follows: </p> Name Preview Controls Remarks Name of the node \ud83c\udd95\ud83d\udea7 Image Screenshot of the controls Short description <p>Add the \ud83c\udd95 or \ud83d\udea7 emoji if applicable</p> <p>Location of the source doc files and the resulting webpages:</p> <ul> <li>Nodes docs</li> <li>Nodes webpages: Effects, Modifiers, Layouts and Drivers</li> </ul>"},{"location":"develop/documentation/#adding-or-changing-modules","title":"Adding or changing Modules","text":"<p>If you create or change a module, update the according module docs.</p> <ul> <li>Image: see Image</li> </ul> <p>Location of the source doc files and the resulting webpages:</p> <ul> <li>MoonBase docs</li> <li> <p>MoonBase Webpages</p> </li> <li> <p>MoonLight docs</p> </li> <li>MoonLight Webpages</li> </ul>"},{"location":"develop/documentation/#images","title":"Images","text":"<ul> <li>Image<ul> <li>For drivers an image of what is driven, for Effects, Modifiers and layouts image showing the result on the monitor. </li> <li>Images should be max 40-100KB, 320 px wide for nodes, 640 px wide, ~100KB for larger images, use iloveimg resize or similar to resize the image. Otherwise page download will be too slow.</li> <li>Store the image in the media folder in /moonbase or /moonlight and refer to it using relative paths: ../../media/moonlight/ <li>For WLED effects, copy the image link already existing on kno.WLED.ge or MM.kno.WLED.ge.</li> <li>Movie to gif: use the gifmaker.sh - ffmpeg must be installed.</li>"},{"location":"develop/documentation/#mkdocs","title":"MKDocs","text":""},{"location":"develop/documentation/#mkdocs-preview-in-vs-code-installation","title":"MKDocs Preview in VS Code - Installation","text":"<p>This method can be used to see a live preview of changes to the docs while editing in VS Code.</p> <p>Download the ZIP: https://github.com/libukai/mkdocs-preview</p> <p>Place the following in workspace settings (F1, if working in a workspace) or create .vscode/settings.json:</p> <pre><code>{\n    \"mkdocsPreview.port\": 8000,\n    //\"mkdocsPreview.port\": 4001,\n\n    // remove the '/docs' prefix from every URL\n    // rewrite \"/docs/XYZ\" \u2192 \"/XYZ\"\n    \"mkdocsPreview.baseDir\": \"\",\n    \"mkdocsPreview.urlReplace\": \"/docs/||/\",\n\n    \"simpleBrowser.defaultUrl\": \"http://localhost:8000/\"\n    //\"simpleBrowser.defaultUrl\": \"http://127.0.0.1:8000/\",\n}\n</code></pre> <p>Open Powershell in your working directory in VS Code.</p> <p>Run:</p> <pre><code>python --version\npython -m pip --version\npython -m pip install --upgrade pip\npython -m pip install mkdocs-material\n</code></pre> <p>Run either:</p> <pre><code>mkdocs serve -a localhost:8000\nmkdocs serve -a 127.0.0.1:8000\n</code></pre> <p>It should now be visible \ud83d\udc09</p>"},{"location":"develop/documentation/#troubleshooting","title":"Troubleshooting:","text":"<ol> <li> <p>Try using these commands to manually test addresses after starting the service in VS Code:</p> <p>Ctl + Shft + P -&gt; MKDocs Preview: Toggle MkDocs Preview</p> <p>Ctl+ Shft + P -&gt; Simple Browser: Show</p> </li> <li> <p>Check the address in a browser:</p> <p>https://localhost:8000</p> <p>https://127.0.0.1:8000/</p> </li> <li> <p>Ensure mkdocs serve is running and reboot the service.</p> </li> </ol>"},{"location":"develop/drivers/","title":"Drivers","text":""},{"location":"develop/drivers/#overview","title":"Overview","text":""},{"location":"develop/drivers/#initless-drivers","title":"Initless drivers","text":"<p>Initless means there is no addLeds (like in FastLed) or initLed (like in physical and virtual driver): </p> <ul> <li>a Context (see below) will be set</li> <li>Driver.show (see below) will use this context to set the right data to the right output.</li> <li>The context can dynamically change without needing to reboot or recompile! e.g. changes in pin allocations, leds per pin, RGB or RGBW, or DMX lights like moving heads.</li> </ul> <p>The Art-Net driver is currently working like this, to be added to physical and virtual driver and parallel IO (P4).</p> <p>The advantages of dynamic context change are:</p> <ul> <li>No need to recompile any changed configs (e.g. colorOrder is fully flexible, not a setting in platformio.ini)</li> <li>No need to restart while setting up a specific installation. Just change layouts until it works as intended.</li> <li>Allows for a flexible mix of different outputs e.g. send the first 1024 leds to physical driver, next to virtual driver, next to spi, next to one Art-Net device, next to another Art-Net device. </li> </ul>"},{"location":"develop/drivers/#context","title":"Context","text":"<p>Make sure the following is available before calling driver.show. Note: setup only sets variables the loop will use.</p> <ul> <li>channels[]: pka leds array (CRGB leds) but we now support any light: not only 3 or 4 channels</li> <li>channelsPerLed: a light in the channels array can be found by index * channelsPerLed.</li> <li>offsets within the channels (RGBW and more like pan and tilt)</li> <li>outputs[]: pins[] for leds drivers, outputs[] for Art-Net. Use generic name outputs[]</li> <li>lengths[]: nr of lights per output</li> <li>driver[]: shows for each output for which driver it is ... \ud83d\udea7 as currenlty all drivers process all lights which sometimes is what you want (monitor on leds what is on moving heads) but not always</li> </ul> <p>This is the current list of supported lights ranging from 3 channels per light (the classic rgb LEDs) to 32 channels per light. Currently pre defined: lights preset. In the future configurable</p> <ul> <li>RGB</li> <li>RBG</li> <li>GRB: default WS2812</li> <li>GBR</li> <li>BRG</li> <li>BGR</li> <li>RGBW: e.g. 4 channel par/dmx light</li> <li>GRBW: rgbw LED eg. SK6812</li> <li>GRB6: some LED curtains</li> <li>RGBWYP: 6 channel par/dmx light with UV etc</li> <li>MHBeeEyes150W-15 \ud83d\udc3a: 15 channels moving head, see https://moonmodules.org/MoonLight/moonlight/drivers/#art-net</li> <li>MHBeTopper19x15W-32 \ud83d\udc3a: 32 channels moving head</li> <li>MH19x15W-24: 24 channels moving heads</li> </ul> <p>Based on the choosen value, the channels per light and the offsets will be set e.g. for GRB: header-&gt;channelsPerLight = 3; header-&gt;offsetRed = 1; header-&gt;offsetGreen = 0; header-&gt;offsetBlue = 2;. Drivers should not make this mapping, the code calling drivers should do.</p> <p>The RGB and W offsets needs to be re-ordered and brightness corrected from the channel array. Not only Art-Net but  also a LEDs driver need to accept channel arrays with more then 4 channels per light. Eg GRB6 is a type of led curtain some of us have, which a Chinese manufacturer screwed up: 6 channels per light but only rgb is used, 3 channels do nothing</p>"},{"location":"develop/drivers/#drivershow","title":"Driver.show","text":"<p>Called by loop function.</p> <ul> <li>loop over all outputs (or pins) which are meant for a specific driver (e.g. all outputs for artnet)<ul> <li>pre channel actions (...)</li> <li>loop over all lights in the output<ul> <li>for each light<ul> <li>pre light actions (e.g. setup dma ...)</li> <li>copy all channels to the buffer (for art-net) or to the memory area / dma / parallelIO ... so the driver can process it<ul> <li>find them in the channels array</li> </ul> </li> <li>correct RGBW offsets when present for brightness using LUT (__red_map etc in Yves his drivers)</li> <li>send the buffer/memory (artnetudp.writeTo sends one universe, Yves drivers ..., Troy drivers ...)</li> <li>post light actions (e.g. increase universe etc)</li> </ul> </li> </ul> </li> <li>post channel actions (...)</li> </ul> </li> </ul> <p>For an example of the loop, see Artnet loop. Not splitten in output loop and lights loop yet (as now all drivers process all lights). Before and after the loop are pre /post output / light actions.</p>"},{"location":"develop/drivers/#moonlight-layout-nodes","title":"MoonLight layout nodes","text":"<p>In MoonLight you can define one or more layout nodes telling which position lights have in the real world. E.g. a strip, or a panel (orientation, snake, ...) or a ring or any fantasy shape. Each layout nodes addLights and addPins (will be renamed to addOutPut). Layouts can be reordered. The pins and lights arrays will be filled with the Layout nodes in the order they are defined.</p> <p>Note: Above concept can also be offered in a library and imported in other projects like WLED, FastLED scripts etc.</p>"},{"location":"develop/drivers/#notes-on-the-i2s-clockless-driver","title":"Notes on the I2S clockless driver","text":"<ul> <li>nb_components -&gt; channelsPerLed</li> <li>p_r, p_g, p_b, p_w -&gt; offsetRed, Green, Blue, White</li> <li>stripSize[] -&gt; lenghts[]</li> </ul>"},{"location":"develop/drivers/#initled","title":"initLed","text":"<ul> <li>setBrightness / setGamma -&gt; done by MoonLight if brightness (or gamma) changes, driver.show expects the LUT to be set right</li> <li>setPins(Pinsq): called by MoonLight as soon as pins changes: add function driver.updatePins which also cleans up previous defined pins (I think there is no cleanup, so can be called repeatedly?)</li> <li>i2sInit(): not using context...: so this (and i2sReset...) can be called once in the setup...<ul> <li>i2sReset(): not using context...</li> <li>i2sReset_DMA(): not using context...</li> <li>i2sReset_FIFO(): not using context...</li> </ul> </li> <li>initDMABuffers(): uses __NB_DMA_BUFFER, nb_components -&gt; should be called by MoonLight as soon as dma buffer (would be very nice if this is a variable instead of a constant, so can be tweaked in MoonLight without recompiling) or lights preset (channelsPerLed) changes. Add function driver.updateLightsPreset(dma_buffer, channelsPerLight)...<ul> <li>putdefaultones: uses nb_components</li> </ul> </li> </ul>"},{"location":"develop/drivers/#showpixels","title":"showPixels","text":"<ul> <li>loadAndTranspose(): uses this for all dma buffers. All Okay<ul> <li>loop over num_strips (outputs[].length)</li> <li>loop over stripSize (lenghts[]), light by light: triggered by _I2SClocklessLedDriverinterruptHandler<ul> <li>fills secondPixel using LUT and RGB(W) offsets</li> <li>transpose16x1_noinline2(secondpixel)</li> </ul> </li> </ul> </li> <li>i2sStart: uses dma buffers: Okay</li> </ul>"},{"location":"develop/installation/","title":"Installation","text":"<p>The development environment consists of</p> <ul> <li> <p>VSCode</p> <ul> <li>Platformio IDE</li> <li>nodejs</li> <li>git</li> <li>python</li> </ul> </li> <li> <p>Github manager</p> <ul> <li>GitKraken (recommended)</li> <li>GitHub Desktop</li> <li>No Github manager (not recommended)</li> </ul> </li> </ul>"},{"location":"develop/installation/#summary","title":"Summary","text":"<ul> <li>Fork the MoonLight repo and download</li> <li>Install VSCode with the platformIO IDE extension</li> <li>Open MoonLight in VSCode. </li> <li>Build or upload to an ESP32 device. </li> </ul>"},{"location":"develop/installation/#fork-and-download","title":"Fork and Download","text":"<p>Step 1: Create a fork</p> <pre><code>* Login to your own github account\n* Fork: go to [MoonModules/MoonLight](https://github.com/MoonModules/MoonLight/) and press Fork, uncheck 'Copy the main branch only' and press Create Fork. You will be moved to your fork of MoonLight\n</code></pre> <p>Step 2: Download the MoonLight repository</p> <ul> <li> <p>Use GitKraken or GitHub Desktop (or manually)</p> <ul> <li>Create a folder to download to: e.g. Developer/GitGub/MoonModules/MoonLight</li> <li>Press + / New tab and select Clone a Repo </li> <li>Copy https://github.com//MoonLight.git and paste in the URL field of GitKraken <li>Press clone the repo</li> <p></p> <ul> <li>The main branch will be checked out per default. To run / test latest developments, switch to the dev branch</li> </ul>"},{"location":"develop/installation/#install-and-setup-vscode","title":"Install and setup VSCode","text":"<p>Step 1: Download Visual Studio Code</p> <ul> <li> <p>Windows: download from the Microsoft Store</p> <p></p> </li> <li> <p>MacOS: Visual Studio download</p> </li> </ul> <p>Step 2: Install PlatformIO IDE</p> <ul> <li> <p>In VSCode, search for the extension</p> <p></p> </li> <li> <p>Install the extension. Please note it can take a while before Configuring project is finished. Do not cancel. Don't change anything in the code yet. Drink a \u2615\ufe0f.</p> <p></p> </li> </ul> <p>pioarduino IDE</p> <p>PlatformIO IDE is default but as we are using latest esp-idf, pioarduino IDE is needed when PlatformIO IDE fails.</p> <p>Step 3: * Open the downloaded MoonLight repository </p>"},{"location":"develop/installation/#build-and-upload","title":"Build and upload","text":"<p>Step 1: Build</p> <ul> <li> <p>Press \u2611\ufe0f in the bottom statusbar</p> <p></p> </li> <li> <p>If you compile for the first time it take some time to finish (\u2615\ufe0f)</p> <p> </p> </li> </ul> <p>Step 2: Upload MoonLight to an ESP32-device</p> <ul> <li>Connect an ESP32-device via USB and select the device using the (second) \ud83d\udd0c icon in the staturbar. See Hardware.   </li> </ul> <p>USB-to-serial chip drivers</p> <p>In some cases, ESP32-devices won't show connected. See USB-to-serial chip drivers at MoonLight Web Installer </p> <ul> <li> <p>Erase the device if it is a new device or the device has not been used for MoonModules before: go to \ud83d\udc7d in the left menu and select Erase Flash</p> <p></p> </li> <li> <p>Press upload (\u27a1\ufe0f) in the status bar</p> <p></p> </li> <li> <p>The firmware is now flashed to your ESP32 device, after flashing the ESP32 device will reboot</p> </li> </ul> <p>Serial Monitor</p> <p>Recommended: Press PlatformIO:Serial Monitor to see the debug information produced (the first \ud83d\udd0c on the VSCode statusbar)</p> <p></p> <p>Step 3: Connect to MoonLight</p> <p>Before changing code, test if the current download of MoonLight is running fine. Follow the instructions in Connect MoonLight and Setup MoonLight.</p> <ul> <li> <p>If you are developing or updating existing MoonLight installations MoonLight might be outdated or not show up correctly in the browser or not even appear. Two reasons</p> <ul> <li> <p>Sometimes the latest front end code is not generated yet (WWWData.h). This is how to set it right: </p> <ul> <li>Open platformIO new terminal (&gt;_)</li> <li>touch ./interface/src/app.html so the build process will be triggered to create a new WWWData.h</li> <li>build the project (\u2714) - if nodejs is not installed (yet) you will get errors. See troubleshooting</li> <li>check in your github manager (gitkraken of github desktop) that a new WWWData.h is created</li> </ul> </li> <li> <p>An old version is cached in the browser. See UI not showing when installing new version of MoonLight how to solve that.</p> </li> </ul> </li> <li> <p>A MoonLight device can be accessed via it's IP address or via http://ml-home.local. The latter uses MDNS.</p> </li> </ul> <p>ESP32Devices</p> <p>IF you want to know which MoonLight (or WLED) devices run on your network, use ESP32Devices to discover the ESP32 nodes on your network</p>"},{"location":"develop/installation/#troubleshooting","title":"Troubleshooting","text":"<p>supporting tools</p> <ul> <li>Optionally you need to install git and nodejs, run npm install and make sure python &gt; v3.10 in VSCode.</li> <li>Instead of Platformio IDE, the pioarduino IDE extension might be needed in VSCode</li> </ul>"},{"location":"develop/installation/#git-install","title":"Git install","text":"<ul> <li> <p>When git is not installed on your system, download git and install, restart VSCode and press \u2611\ufe0f again</p> <ul> <li> <p>Windows:</p> <p></p> </li> <li> <p>MacOS</p> <p></p> </li> </ul> </li> </ul> <p>Install git on MacOS</p> <ul> <li>Install homebrew: will take a while: \u2615\ufe0f</li> <li>Install git using homebrew (replace  with your user name): <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\necho &gt;&gt; /Users/&lt;user&gt;/.zprofile\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; /Users/&lt;user&gt;/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n\nbrew install git\n</code></pre>"},{"location":"develop/installation/#python-and-lzma","title":"Python and LZMA","text":"<p>MacOS: Python and LZMA</p> <p>In some cases LZMA support must be installed</p> <p></p> <ul> <li>Run in VSCode / pio shell ([&gt;_])</li> </ul> <pre><code>brew install xz\n\npython -V\n</code></pre> <ul> <li>python -V should show a version &gt; 3.10 (e.g. 3.11.7)</li> </ul>"},{"location":"develop/installation/#install-nodejs","title":"Install nodejs","text":"<p>nodejs is needed if changes on the frontend (UI) are made (interface folder). On each file change, \u2611\ufe0f or \u27a1\ufe0f will rebuild the UI using nodejs.</p> <ul> <li> <p>Windows: if nodejs is not on your system you will get this error:</p> <p></p> <ul> <li>download nodejs if it is not run in admin mode you will get this:</li> </ul> <p></p> <ul> <li>if this is the case, run an administrator command prompt and run the downloaded .msi file as follows:</li> </ul> <p> </p> <ul> <li>after succesful install of nodejs run \u2611\ufe0f or \u27a1\ufe0f again. It might be needed to rebuild node_modules and package-lock.json if you see this</li> </ul> <p></p> <ul> <li>Remove node_modules and package-lock.json - run as administrator if the OS complains!</li> <li>Rebuild node_modules and package-lock.json by opening a VSCode shell using [&gt;_] in the statusbar <pre><code>cd interface \nnpm install\n</code></pre></li> <li>If that give errors set execution policies as follows:</li> </ul> <p></p> <ul> <li>Press run \u2611\ufe0f or \u27a1\ufe0f again it should now complete succesfully</li> </ul> <p></p> </li> <li> <p>MacOS</p> <ul> <li>Go to nodejs download</li> <li>Get a prebuilt Node.js\u00ae for macOS running a ARM64 architecture (for modern Mx MacBooks)</li> <li>Choose maxOS Installer (.pkg)</li> <li>Next Next Finish Done</li> <li>Press run \u2611\ufe0f or \u27a1\ufe0f again it should now complete succesfully (if needed restart VSCode)</li> <li>If still errors, Remove node_modules and package-lock.json, cd interface, npm install and repeat previous step</li> </ul> </li> </ul> <p>Ignore DragDropList error</p> <p>This error will show up in the logging <pre><code>node_modules/svelte-dnd-list/DragDropList.svelte (595:3): Error when using sourcemap for reporting an error: Can't resolve original location of error.\n</code></pre> Just ignore it.</p> <ul> <li> <p>Check serial output</p> <p></p> </li> <li> <p>Go to development for further info on developing MoonBase / MoonLight functionality.</p> </li> </ul>"},{"location":"develop/installation/#other-troubles","title":"Other troubles","text":"<ul> <li>In general: first close and restart VSCode and run \u2611\ufe0f or \u27a1\ufe0f again.</li> <li>python &gt; 3.10: install python (3.11.13) in the VSCode shell (not in a normal os terminal)</li> <li>esptool.py not downloaded: deinstall platformIO IDE and install pioarduino IDE extensions (required for support of latest esp-idf 5.5)</li> <li>Run everything from within VSCode, close any alternative / external tools which (potentially) access esp32 devices. They can claim resources or send commands to the device which interfere with what we trying to accomplish here.</li> <li>If the ESP32 device AP is not showing up in your WiFi list it might be helpful to fully erase the ESP32 device before flashing (VSCode \ud83d\udc7d, Erase flash)</li> <li>Sometimes the Serial log may show: [5817][W][WiFiGeneric.cpp:1408] setTxPower(): Neither AP or STA has been started. This is from setTxPower in APSettingsService. Delay has been added to prevent this.</li> </ul>"},{"location":"develop/layers/","title":"Layers","text":""},{"location":"develop/layers/#mapping-model","title":"Mapping model (\ud83d\udea7)","text":"<ul> <li>Multiple Nodes can be created (1)<ul> <li>Each node can have controls (compare controls in WLED / StarLight) \u2705</li> <li>Each node can run precompile code or Live scripts (with or without loop) \u2705</li> <li>Each node has a type:<ul> <li>Layout: tell where each light is in a 1D/2D/3D physical coordinate space (based on StarLight fixtures) \u2705</li> <li>Effect: <ul> <li>run an effect in a virtual coordinate space \u2705</li> <li>in the physical space if you want to run at highest performance, e.g. a random effect doesn't need to go through mappings \u2705</li> </ul> </li> <li>Modifier: Mirror, rotate, etc, multiple modfiers allowed (projection in StarLight) \ud83d\udea7<ul> <li>A modifier can also map lights dimensions to effect dimensions: change the lights to a 1D/2D/3D virtual coordinate space<ul> <li>e.g. if the light is a globe, you can map that to 2D using mercator projection mapping</li> <li>if the light is 200x200 you can map it to 50x50</li> <li>if the light is 2D, a 1D effect can be shown as a circle or a bar (as WLED expand1D)</li> </ul> </li> </ul> </li> <li>Driver show: show the result on Leds (using FastLED, hpwit drivers), Art-Net, DDP, ...</li> </ul> </li> </ul> </li> <li>Future situation: Nodes and noodles (2)<ul> <li>Replace the nodes table (1) by a graphical view (2)</li> </ul> </li> <li>Virtual Layer (MappingTable) (3)<ul> <li>Array of arrays. Outer array is virtual lights, inner array is physical lights. \u2705</li> <li>Implemented efficiently using the StarLight PhysMap struct \u2705</li> <li>e.g. [[],[0],[1,2],[3,4,5],[6,7,8,9]] \u2705<ul> <li>first virtual light is not mapped to a physical light</li> <li>second virtual light is mapped to physical light 0</li> <li>third virtual light is mapped to physical lights 1 and 2</li> <li>and so on</li> </ul> </li> <li>Virtual lights can be 1D, 2D or 3D. Physical lights also, in any combination<ul> <li>Using x + y * sizeX + z * sizeX * sizeY \ud83d\udea7</li> </ul> </li> <li>set/getLightColor functions used in effects using the MappingTable \u2705</li> <li>Nodes manipulate the MappingTable and/or interfere in the effects loop \ud83d\udea7</li> <li>A Virtual Layer mapping gets updated if a layout, mapping or dimensions change \ud83d\udea7</li> <li>An effect uses a virtual layer. One Virtual layer can have multiple effects. \u2705</li> </ul> </li> <li>Physical layer<ul> <li>Lights.header and Lights.channels. CRGB leds[] is using lights.channels (acting like leds[] in FASTLED) \u2705</li> <li>A Physical layer has one or more virtual layers and a virtual layer has one or more effects using it. \u2705</li> </ul> </li> <li> <p>Presets/playlist: change (part of) the nodes model</p> <p>\u2705: Done</p> </li> </ul>"},{"location":"develop/layers/#example","title":"Example","text":"<pre><code>{\n  \"nodes\": [\n    {\n      \"name\": \"Lissajous \ud83d\udd25\ud83c\udfa8\ud83d\udc19\",\n      \"on\": true,\n      \"controls\": [\n        {\n          \"name\": \"xFrequency\",\n          \"type\": \"slider\",\n          \"default\": 64,\n          \"p\": 1065414703,\n          \"value\": 64\n        },\n        {\n          \"name\": \"fadeRate\",\n          \"type\": \"slider\",\n          \"default\": 128,\n          \"p\": 1065414704,\n          \"value\": 128\n        },\n        {\n          \"name\": \"speed\",\n          \"type\": \"slider\",\n          \"default\": 128,\n          \"p\": 1065414705,\n          \"value\": 128\n        }\n      ]\n    },\n    {\n      \"name\": \"Random \ud83d\udd25\",\n      \"on\": true,\n      \"controls\": [\n        {\n          \"name\": \"speed\",\n          \"type\": \"slider\",\n          \"default\": 128,\n          \"p\": 1065405731,\n          \"value\": 128\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"develop/modules/","title":"Modules","text":"<p>A module is a generic building block to create server and UI functionality which can be activated through the menu.</p> <p>See Lights Control or Devices for examples</p> <p>Press the ? on any module to go to the documentation.</p> <p>With Moonbase Modules it is possible to create new module entirely from one c++ class by only defining a json document describing the data structure and a function catching all the changes in the data. Http endpont and websockets are created automatically. There is no need to create any UI code, it is entirely driven by the json document.</p> <p>Each module has each own documentation which can be accessed by pressing the ? and is defined in the docs folder.</p> <p>To create a new module:</p> <ul> <li>Create a class which inherits from Module</li> <li>Call the Module constructor with the name of the module.<ul> <li>This name will be used to set up http rest api and webserver sockets</li> </ul> </li> </ul> <pre><code>class ModuleDemo : public Module\n{\npublic:\n\nModuleDemo(PsychicHttpServer *server\n      , ESP32SvelteKit *sveltekit\n      , FileManager *fileManager\n    ) : Module(\"demo\", server, sveltekit) {\n        MB_LOGD(MB_TAG, \"constructor\");\n    }\n}\n</code></pre> <ul> <li>Implement function setupDefinition to create a json document with the datastructure<ul> <li>Store data on the file system</li> <li>Generate the UI</li> <li>Initialy create the module data</li> </ul> </li> </ul> <pre><code>void setupDefinition(JsonArray root) override{\n    JsonObject property; // state.data has one or more properties\n    JsonArray details; // if a property is an array, this is the details of the array\n    JsonArray values; // if a property is a select, this is the values of the select\n\n    property = root.add&lt;JsonObject&gt;(); property[\"name\"] = \"hostName\"; property[\"type\"] = \"text\"; property[\"default\"] = \"MoonLight\";\n    property = root.add&lt;JsonObject&gt;(); property[\"name\"] = \"connectionMode\"; property[\"type\"] = \"select\"; property[\"default\"] = \"Signal Strength\"; values = property[\"values\"].to&lt;JsonArray&gt;();\n    values.add(\"Offline\");\n    values.add(\"Signal Strength\");\n    values.add(\"Priority\");\n\n    property = root.add&lt;JsonObject&gt;(); property[\"name\"] = \"savedNetworks\"; property[\"type\"] = \"array\"; details = property[\"n\"].to&lt;JsonArray&gt;();\n    {\n        property = details.add&lt;JsonObject&gt;(); property[\"name\"] = \"SSID\"; property[\"type\"] = \"text\"; property[\"default\"] = \"ewtr\"; property[\"min\"] = 3; property[\"max\"] = 32; \n        property = details.add&lt;JsonObject&gt;(); property[\"name\"] = \"Password\"; property[\"type\"] = \"password\"; property[\"default\"] = \"\";\n    }\n\n}\n</code></pre> <ul> <li>Implement function onUpdate to define what happens if data changes<ul> <li>struct UpdatedItem defines the update (parent property (including index in case of multiple records), name of property and value)</li> <li>This runs in the httpd / webserver task. To run it in another task (application task) use runInTask1 and 2 - see ModuleLightsControl</li> </ul> </li> </ul> <pre><code>    void onUpdate(UpdatedItem &amp;updatedItem) override\n    {\n        if (updatedItem.name == \"lightsOn\" || updatedItem.name == \"brightness\") {\n            MB_LOGD(MB_TAG, \"handle %s = %s -&gt; %s\", updatedItem.name, updatedItem.oldValue.c_str(), updatedItem.value.as&lt;String&gt;().c_str());\n            FastLED.setBrightness(_state.data[\"lightsOn\"]?_state.data[\"brightness\"]:0);\n        } else if (updatedItem.parent[0] == \"nodes\" &amp;&amp; updatedItem.name == \"name\") {    \n            MB_LOGD(MB_TAG, \"handle %s = %s -&gt; %s\", updatedItem.name, updatedItem.oldValue.c_str(), updatedItem.value.as&lt;String&gt;().c_str());\n            if (updatedItem.oldValue.length())\n                MB_LOGD(MB_TAG, \"delete %s ...\", updatedItem.oldValue.c_str());\n            if (updatedItem.value.as&lt;String&gt;().length())\n                compileAndRun(updatedItem.value);\n        } else\n            MB_LOGD(MB_TAG, \"no handle for %s.%s[%d] = %s -&gt; %s\", updatedItem.parent[0], updatedItem.name, updatedItem.index[0], updatedItem.oldValue.c_str(), updatedItem.value.as&lt;String&gt;().c_str());\n    }\n</code></pre> <ul> <li>Implement function loop1s to send readonly data from the server to the UI<ul> <li>Optionally, only when a module has readonly data</li> </ul> </li> </ul> <pre><code>    void loop1s() {\n        if (!_socket-&gt;getConnectedClients()) return; // \ud83c\udf19 No need for UI tasks\n\n        JsonDocument newData; //to only send updatedData\n        JsonArray scripts = newData[\"scripts\"].to&lt;JsonArray&gt;(); //to: remove old array\n        LiveScriptNode node;\n        node.getScriptsJson(scripts);\n\n        //only if changed\n        if (_state.data[\"scripts\"] != newData[\"scripts\"]) {\n            _state.data[\"scripts\"] = newData[\"scripts\"]; //update without compareRecursive -&gt; without handles\n            update([&amp;](ModuleState &amp;state) {\n                return StateUpdateResult::CHANGED; // notify StatefulService by returning CHANGED\n            }, \"server\");\n        }\n    }\n</code></pre> <ul> <li>Add the module in main.cpp</li> </ul> <pre><code>ModuleDemo moduleDemo = ModuleDemo(&amp;server, &amp;esp32sveltekit, &amp;fileManager);\n...\nmoduleDemo.begin();\n...\nmoduleDemo.loop();\n...\nmoduleDemo.loop1s();\n</code></pre> <ul> <li>Add the module in menu.svelte (this will be automated in the future)</li> </ul> <pre><code>submenu: [\n   {\n      title: 'Module Demo',\n      icon: BulbIcon,\n      href: '/moonbase/module?group=moon&amp;module=demo',\n      feature: page.data.features.moonlight,\n   },\n]\n</code></pre> <ul> <li>This is all to create a fully functioning new module</li> </ul>"},{"location":"develop/modules/#readonly-data","title":"Readonly data","text":"<p>A module can consist of data which is edited by the user (e.g. selecting a live script to run) and data which is send from the server to the UI (e.g. a list of running processes). Currently both type of valuas are stored in state data and definition. Distinguished by property[\"ro\"] = true in setupDefinition. So the client uses state data and definition to build a screen with both types visually mixed together (what is desirable). Currently there are 2 websocket events: one for the entire state (including readonly) and one only for readonly which only contains the changed values. Module.svelte handles readonly differently by the function handleRO which calls updateRecursive which only update the parts of the data which has changed.</p> <p>It might be arguable that readonly variables are not stored in state data.</p>"},{"location":"develop/modules/#server","title":"Server","text":"<ul> <li>Module.h and Module.cpp will generate all the required server code</li> </ul>"},{"location":"develop/modules/#ui","title":"UI","text":"<ul> <li>Module.svelte will deal with the UI</li> <li>MultiInput.svelte is used by Module.svelte to display the right UI widget based on what is defined in the definition json</li> <li>Modifications done in menu.svelte do identify a module by href and not by title alone</li> </ul>"},{"location":"develop/modules/#example-of-json","title":"Example of json","text":"<pre><code>{\n  \"nrOfLights\": 256,\n  \"channelsPerLight\": 3,\n  \"maxChannels\": 12288,\n  \"size\": {\n    \"x\": 16,\n    \"y\": 16,\n    \"z\": 1\n  },\n  \"nodes#\": 2,\n  \"layers\": [\n    {\n      \"nrOfLights\": 256,\n      \"size\": {\n        \"x\": 16,\n        \"y\": 16,\n        \"z\": 1\n      },\n      \"mappingTable#\": 256,\n      \"nrOfZeroLights\": 0,\n      \"nrOfOneLight\": 256,\n      \"mappingTableIndexes#\": 0,\n      \"nrOfMoreLights\": 0,\n      \"nodes#\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"develop/nodes/","title":"Nodes","text":""},{"location":"develop/nodes/#overview","title":"Overview","text":"<p>A node can be an Effect, a Modifier, a Layer or a Driver.</p> <ul> <li>See the MoonLight functional video for an introduction to nodes.</li> <li>See the Developer quickstart video how to add of nodes.</li> <li>MoonLight community approach encourages nodes to be added by 'everybody'.</li> <li>MoonLight only supports one firmware per type of board. This means that all nodes contributed by the community will be available in that firmware and it is expected to be maintained by the author of a node specifically and the community in general.</li> </ul> <p>Nodes are inspired by WLED usermods, further developed in StarBase and now in MoonLight (using the ESP32-Sveltekit infrastructure)</p> <p>A node implements the following (overloaded) functions:</p> <ul> <li>setup() and loop()</li> <li>controls: each node has a variable number of flexible variables of different types (sliders/range, checkboxes, numbers etc). They are added with the setControl function in the setup()</li> <li> <p>...</p> </li> <li> <p>Node types: it is recommended that a node is one of the 4 types (Effect, Modifier, Layer, Driver). However each node could perform functionality of all types. To recognize what a node does the emojis \ud83d\udea5, \ud83d\udd25, \ud83d\udc8e and \u2638\ufe0f are used in the name. The function hasOnLayout() and hasModifier() indicate the specific functionality the node supports. They control when a physical to virtual mapping is recalculated</p> <ul> <li>hasOnLayout(): a layout node specify the amount of position of lights controlled. E.g. a panel of 16x16 or a cube of 20x20x20. If hasOnLayout() is true you should implement onLayout calling addLight(position) and addPin() for all the lights. </li> <li>addPin() is needed if a LED driver is used to send the output to LED strips.</li> <li>hasModifier(): a modifier node which manipulates virtual size and positions and lights using one or more of the functions modifySize, modifyPosition and modifyXYZ.</li> <li>if the loop() function contains setXXX functions is used it is an effect node. It will contain for-loops iterating over each virtual ! light defined by layout and modifier nodes. The iteration will be on the x-axis for 1D effects, but also on the y- and z-axis for 2D and 3D effects. setRGB is the default function setting the RGB values of the light. If a light has more 'channels' (e.g. Moving heads) they also can be set. </li> </ul> </li> <li>Moving heads<ul> <li>addLight will show where the moving head will be on the stage. In general only an array of a few lights e.g. 4 moving heads in a row. A moving head effect will then iterate over 4 lights where each light might do something different (e.g. implement a wave of moving head movement)</li> <li>You need to define channelsPerLight in the layout node setup() - (it is default 3 to support normal LEDs). Currently MoonLight only supports identical moving heads with the same channels. The first light starts at DMX 0 (+1), the second at DMX channelsPerLight (+1) the third on DMX 2*channelsPerLight (+1) and so on. (+1): DMX typically starts at address 1 while MoonLight internal starts with 0... \ud83d\udea7. We are working on a solution to support different lights e.g a mix of 15 channel lights and 32 channel lights etc. You could set channelsPerLight to a higher number as the real lights channels, e.g. 32 so each lights DMX address starts at a multiple of 32.</li> <li>Layout: The layout node also defines which functionality / channels the light support by defining offsets. Currently the following offsets are supported: offsetRGB, offsetWhite, offsetBrightness, offsetPan, offsetTilt, offsetZoom, offsetRotate, offsetGobo, offsetRGB1, offsetRGB2, offsetRGB3, offsetBrightness2 and need to be set in the setup() function.</li> <li>The distinction between physical and virtual layer for moving heads is not useful if you have only 2-4 moving heads. However this is a standard MoonLight feature. It might become useful if you have like 8 (identical) moving heads, 4 left and 4 right of the stage, then you can add a mirror modifier and the virtual layer will only control 4 lights, which then will be mapped to 8 physical lights. In theory you can also have a cube of like 512 moving heads and then exotic modifiers like pinwheel could be used to really go crazy. Let us know when you have one of these setups \ud83d\udea8</li> <li>Moving heads will be controlled using the ArtNed Node. addPin is not needed for moving heads, although you might want to attach LEDs for a visual view of what is send to Art-Net.</li> <li>Effect nodes set light: Currently setRGB, setWhite, setBrightness, setPan, setTilt, setZoom, setRotate, setGobo, setRGB1, setRGB2, setRGB3, setBrightness2 is supported. In the background MoonLight calculates which channel need to be filled with values using the offsets (using the setLight function).</li> <li>If offsetBrightness is defined, the RGB values will not be corrected for brightness in ArtNed.</li> </ul> </li> </ul>"},{"location":"develop/nodes/#layout-nodes","title":"Layout nodes","text":"<p>In MoonLight you can define one or more layout nodes telling which position lights have in the real world. E.g. a strip, or a panel (orientation, snake, ...) or a ring or any fantasy shape. Each layout nodes addLights and addPins (will be renamed to addOutPut). Layouts can be reordered. Driver nodes will use these pins and the leds connected to it.</p>"},{"location":"develop/nodes/#drivers","title":"Drivers","text":""},{"location":"develop/nodes/#initless-drivers","title":"Initless drivers","text":"<p>Initless means there is no addLeds (like in FastLed) or initLed (like in physical and virtual driver): </p> <ul> <li>a Context (see below) will be set</li> <li>Driver.show (see below) will use this context to set the right data to the right output.</li> <li>The context can dynamically change without needing to reboot or recompile! e.g. changes in pin allocations, leds per pin, RGB or RGBW, or DMX lights like moving heads.</li> </ul> <p>The Art-Net driver is currently working like this, to be added to physical and virtual driver and parallel IO (P4).</p> <p>The advantages of dynamic context change are:</p> <ul> <li>No need to recompile any changed configs (e.g. colorOrder is fully flexible, not a setting in platformio.ini)</li> <li>No need to restart while setting up a specific installation. Just change layouts until it works as intended.</li> <li>Allows for a flexible mix of different outputs e.g. send the first 1024 leds to physical driver, next to virtual driver, next to spi, next to one Art-Net device, next to another Art-Net device. </li> </ul>"},{"location":"develop/nodes/#context","title":"Context","text":"<p>Make sure the following is available before calling driver.show. Note: setup only sets variables the loop will use.</p> <ul> <li>channels[]: pka leds array (CRGB leds) but we now support any light: not only 3 or 4 channels</li> <li>channelsPerLed: a light in the channels array can be found by index * channelsPerLed.</li> <li>offsets within the channels (RGBW and more like pan and tilt)</li> <li>outputs[]: pins[] for leds drivers, outputs[] for Art-Net. Use generic name outputs[]</li> <li>lengths[]: nr of lights per output</li> <li>driver[]: shows for each output for which driver it is ... \ud83d\udea7 as currenlty all drivers process all lights which sometimes is what you want (monitor on leds what is on moving heads) but not always</li> </ul> <p>This is the current list of supported lights ranging from 3 channels per light (the classic rgb LEDs) to 32 channels per light. Currently pre defined: lights preset. In the future configurable</p> <ul> <li>RGB</li> <li>RBG</li> <li>GRB: default WS2812</li> <li>GBR</li> <li>BRG</li> <li>BGR</li> <li>RGBW: e.g. 4 channel par/dmx light</li> <li>GRBW: rgbw LED eg. SK6812</li> <li>GRB6: some LED curtains</li> <li>RGBWYP: 6 channel par/dmx light with UV etc</li> <li>MHBeeEyes150W-15 \ud83d\udc3a: 15 channels moving head, see https://moonmodules.org/MoonLight/moonbase/module/drivers/#art-net</li> <li>MHBeTopper19x15W-32 \ud83d\udc3a: 32 channels moving head</li> <li>MH19x15W-24: 24 channels moving heads</li> </ul> <p>Based on the choosen value, the channels per light and the offsets will be set e.g. for GRB: header-&gt;channelsPerLight = 3; header-&gt;offsetRed = 1; header-&gt;offsetGreen = 0; header-&gt;offsetBlue = 2;. Drivers should not make this mapping, the code calling drivers should do.</p> <p>The RGB and W offsets needs to be re-ordered and brightness corrected from the channel array. Not only Art-Net but  also a LEDs driver need to accept channel arrays with more then 4 channels per light. Eg GRB6 is a type of led curtain some of us have, which a Chinese manufacturer screwed up: 6 channels per light but only rgb is used, 3 channels do nothing</p>"},{"location":"develop/nodes/#drivershow","title":"Driver.show","text":"<p>Called by loop function.</p> <ul> <li>loop over all outputs (or pins) which are meant for a specific driver (e.g. all outputs for artnet)<ul> <li>pre channel actions (...)</li> <li>loop over all lights in the output<ul> <li>for each light<ul> <li>pre light actions (e.g. setup dma ...)</li> <li>copy all channels to the buffer (for art-net) or to the memory area / dma / parallelIO ... so the driver can process it<ul> <li>find them in the channels array</li> </ul> </li> <li>correct RGBW offsets when present for brightness using LUT (__red_map etc in Yves his drivers)</li> <li>send the buffer/memory (artnetudp.writeTo sends one universe, Yves drivers ..., Troy drivers ...)</li> <li>post light actions (e.g. increase universe etc)</li> </ul> </li> </ul> </li> <li>post channel actions (...)</li> </ul> </li> </ul> <p>For an example of the loop, see Artnet loop. Not splitten in output loop and lights loop yet (as now all drivers process all lights). Before and after the loop are pre /post output / light actions.</p>"},{"location":"develop/nodes/#notes-on-the-i2s-clockless-driver","title":"Notes on the I2S clockless driver","text":"<ul> <li>nb_components -&gt; channelsPerLed</li> <li>p_r, p_g, p_b, p_w -&gt; offsetRed, Green, Blue, White</li> <li>stripSize[] -&gt; lenghts[]</li> </ul>"},{"location":"develop/nodes/#initled","title":"initLed","text":"<ul> <li>setBrightness / setGamma -&gt; done by MoonLight if brightness (or gamma) changes, driver.show expects the LUT to be set right</li> <li>setPins(Pinsq): called by MoonLight as soon as pins changes: add function driver.updatePins which also cleans up previous defined pins (I think there is no cleanup, so can be called repeatedly?)</li> <li>i2sInit(): not using context...: so this (and i2sReset...) can be called once in the setup...<ul> <li>i2sReset(): not using context...</li> <li>i2sReset_DMA(): not using context...</li> <li>i2sReset_FIFO(): not using context...</li> </ul> </li> <li>initDMABuffers(): uses __NB_DMA_BUFFER, nb_components -&gt; should be called by MoonLight as soon as dma buffer (would be very nice if this is a variable instead of a constant, so can be tweaked in MoonLight without recompiling) or lights preset (channelsPerLed) changes. Add function driver.updateLightsPreset(dma_buffer, channelsPerLight)...<ul> <li>putdefaultones: uses nb_components</li> </ul> </li> </ul>"},{"location":"develop/nodes/#showpixels","title":"showPixels","text":"<ul> <li>loadAndTranspose(): uses this for all dma buffers. All Okay<ul> <li>loop over num_strips (outputs[].length)</li> <li>loop over stripSize (lenghts[]), light by light: triggered by _I2SClocklessLedDriverinterruptHandler<ul> <li>fills secondPixel using LUT and RGB(W) offsets</li> <li>transpose16x1_noinline2(secondpixel)</li> </ul> </li> </ul> </li> <li>i2sStart: uses dma buffers: Okay</li> </ul>"},{"location":"develop/nodes/#archive","title":"Archive","text":"<p>This page is \ud83d\udea7, text below will be rewritten.</p>"},{"location":"develop/nodes/#qa","title":"Q&amp;A","text":"<p>Collecting questions and answers (from Discord) \ud83d\udea7 !!</p> <ul> <li>I'm therefore wondering if esplive only supports xtensa ASM and not RISCV? we're actually not supposed to enable esplivescript on anything else than the s3. For the moment it\u2019s esp32 , esp32 s2 esp32s3. I am revamping the compiler for it to be more compact and less memory hungry. Once that is done I will work on creating risc assembly language so it can be used with the esp32 C family and also I want to do arm for the pi pico.</li> <li>Technically live scripts works on normal esp32, but MoonLight with live scripts is 103% flash size. I didn\u2019t look into other partitioning (preferably keeping Ota working): note use esp32 16MB!!</li> <li>why do some animations allow me to specifiy the LED strip pin but not others?</li> <li>is there a wiki page I can read for me to understand pin mapping and LED strip physical format?  there are layout nodes \ud83d\udea5 (defining how the lights layed out in a matrix, cube etc. There you can define pins) effect nodes \ud83d\udd25 (obviously) and modifier nodes \ud83d\udc8e(modify an effect)</li> <li>how does the lights control module interact with the animations module?</li> <li>what does \"snake\" mean for a moving head configuration?</li> <li>how do i specify which solid color i want? Added!</li> <li>getting a few \"Software reset due to exception/panic\" depending on the effects i set \ud83d\ude04 but that might be my PSU</li> <li>how I can specify the color order.... I see the define I want in fastled.h, i'm guessing it's passed somehow to the template through maybe the ML_CHIPSET define? oh.... it seems to require a modification of void LedsDriver::init sorry for the spam.... it also looks to me that even with the ML_CHIPSET=SK6812 define there's no support for RGBW as on a small LED strip, setting a solid color of red for example, i see green &amp; white - blue - red - green &amp; white - blue - red (eg: it's forgetting to send 4x 8b per LED)</li> <li>is the monitor only available with the s3? I enabled \"Monitor On\" in the control tab oh that's interesting, the platform booted full white (when configured in solid animation) but went back to what was supposed to be when I started moving the control sliders. should be working on all platforms</li> <li>not sure if this has been flagged, but when changing a selected node type, the parameters of the previous node will stay displayed and when switching node types, I did manage to get LEDs frozen (impossible to get them ot update again) it takes a platform reboot, and changing the movinghead number of LEDs in my case. it looks like some refresh isn't happening. even the platform reboot trick sometimes isn't happening... looking at the console output i'm seeing that my actions on the user interface aren't registered</li> <li>how complex would it be to map several LED strips on several IOs to a virtual 2d matrix? I'm currently looking at the code, more particularly void mapLayout() and it seems the layout is reset every time that function is called, so it is not possible to increase the display size</li> <li>single line and row layouts</li> <li>personally i'd make 2 different menus in the esp32 GUI.. a layout is more something you set and forget about as it is tied to a physical install</li> <li>one layout to define all the lights is definitely a blocker for me (and I imagine more people) as physical installs have their own constraints. let me know what you think. I will add that possibility , I see \u2018some\u2019 usage, but I don\u2019t understand why it is a blocker as in general the whole setup is a number of lights which you know in advance so then it is most clear to define that in one go ?</li> </ul>"},{"location":"develop/nodes/#technical","title":"Technical","text":"<ul> <li> <p>Nodes</p> <ul> <li>See Nodes.h: class Node<ul> <li>name(): name of the node</li> <li>hasFunctions: enables features of the Node (Layout, Modifier)</li> <li>on: (de)activates the node</li> <li>constructor: sets the corresponding layer</li> <li>setup: if layout sets channelsPerLight and request map</li> </ul> </li> <li>Nodes manipulate the LEDs / channels array and the virtual to physical layer mappings.</li> <li>specify which functions (layout, effect, modifier): One node in general implements one, but can also implement all three (e.g. Moving Head...  wip...)<ul> <li>layout</li> <li>effect</li> <li>modifier</li> </ul> </li> <li>Live scripts<ul> <li>See Nodes.h / nodes.cpp</li> </ul> </li> <li>Lights<ul> <li>Regular patterns (CRGB as default but also others like Moving Head ...)</li> </ul> </li> </ul> </li> <li> <p>See Modules</p> </li> <li>Upon changing a pin, driver.init will rerun (FastLED.addLeds, PD and VD driver.init)</li> <li>Uses ESPLiveScripts, see compileAndRun. compileAndRun is started when in Nodes a file.sc is choosen<ul> <li>To do: kill running scripts, e.g. when changing effects</li> </ul> </li> <li>Nodes.h: class Node (constructor, destructor, setup, loop, hasFunctions, map, modify, addControl(s), onUpdate)</li> <li> <p>Nodes.cpp: implement LiveScriptNode</p> <ul> <li>An effect has a loop which is ran for each frame produced. In each loop, the lights in the virtual layer gets it's values using the setRGB function. For multichannel lights also functions as setWhite or (for Moving Heads) setPan, setTilt, setZoom etc. Also getRGB etc functions exists.</li> </ul> </li> </ul>"},{"location":"develop/overview/","title":"Develop Overview","text":"<ul> <li>Installation: Setup VSCode, Fork MoonLight</li> <li>Development: Create branch, change code, document, pull request</li> <li>Nodes: Effects, Modifiers, Layouts and Drivers</li> <li>Modules: MoonBase and MoonLight modules</li> <li>Layers: Coordinate system Effects and Modifiers run in</li> <li>Sveltekit: Explaining the repository MoonLight is forked from</li> <li>Documentation: One repo for code AND documentation</li> </ul> <p>Developers quick start tutorial:</p>"},{"location":"develop/sveltekit/","title":"Sveltekit","text":""},{"location":"develop/sveltekit/#pull-requests","title":"Pull-Requests","text":"<p>MoonLight has made a number of commits which are general purpose and could be added to upstream ESP32 SvelteKit. Pending changes are ready to add in pull-requests as they are branched from the upstream repo. Below lists are ordered in terms of likelyhood to be accepted:</p>"},{"location":"develop/sveltekit/#pending-ready-to-pr","title":"Pending - Ready to PR","text":"<ul> <li>\ud83d\udc1b bug-metadata-parent-wifi: avoid console.log errors</li> <li>\u26a0\ufe0f components-small-fixes: avoid console.log errors</li> <li>\u26a0\ufe0f compile-warnings: role and tab index</li> <li>\ud83d\udca1 service-name-string: Allow service names to be non string literals (e.g. done in MoonBase-Modules)<ul> <li>\u26a0\ufe0f EventSocket emitEvent: use String type</li> </ul> </li> <li>\u26a0\ufe0f no-emit-no-clients</li> <li>\ud83d\udca1 system-status-metrics: use max instead of first</li> <li>\ud83d\udca1 help-to-docs: Help link to github.io docs e.g. Lights control</li> <li>\ud83d\udca1 System metrics<ul> <li>Loops per second (performance)</li> </ul> </li> <li>\ud83d\udca1 System status<ul> <li>Loops per second (performance)</li> </ul> </li> <li>\ud83d\udca1 menu-href-unique: Allow multiple modules using same Module.svelte</li> <li>\ud83d\udca1 measure-battery-pin</li> </ul>"},{"location":"develop/sveltekit/#pending-","title":"Pending - \ud83d\udea7","text":"<ul> <li>File Manager</li> <li>Devices</li> <li>MoonBase-Modules</li> </ul>"},{"location":"develop/sveltekit/#submitted","title":"Submitted","text":"<ul> <li>None ATM</li> </ul>"},{"location":"develop/sveltekit/#merged-into-esp32-sveltekit","title":"Merged into ESP32-Sveltekit","text":"<ul> <li>Expands menu on selected subitem</li> <li>Add file.close in fileHandler handleRequest</li> <li>Refactor System Status and Metrics<ul> <li>Add free_psram, used_psram and psram_size in Analytics (models.ts) and analytics_data (analytics.ts) and show in UI (SystemMetrics.svelte)</li> <li>Send psram data only if psramFound (SystemStatus.svelte, AnalyticsService.h, SystemStatus.cpp)</li> </ul> </li> <li>Wifi: Multiple edits bug resolved</li> <li>ESPD_LOGx: replace first argument with TAG and define TAG as \ud83d\udc3c</li> </ul>"},{"location":"develop/sveltekit/#other-improvements","title":"Other improvements","text":"<ul> <li>Add esp32-s3-devkitc-1-n16r8v and LOLIN_WIFI_FIX in pio.ini (including boards folder)</li> <li>Add Monitor<ul> <li>socket.ts: add else listeners.get(\"monitor\")?.forEach((listener) =&gt; listener(new Uint8Array(message.data)));</li> <li>EventSocket.cpp: add void EventSocket::emitEvent with char * argument</li> </ul> </li> <li>Add MoonBase / MoonLight specific functionality</li> <li>ESP32SvelteKit.cpp: <ul> <li>CPU load (and main.cpp)</li> <li>comment response.addHeader(\"Cache-Control\", \"public, immutable, max-age=31536000\");</li> </ul> </li> <li>interface/source/routes/+layout.svelte<ul> <li>Show monitor only on moon functions (so captive portal on small screen looks fine): #if (page.data.features.monitor &amp;&amp; page.url.pathname.includes(\"moon\"))</li> </ul> </li> <li>main.cpp: esp_log_set_vprintf(my_vprintf); \ud83d\udea7</li> <li>ci pio</li> <li>run in loopTask to avoid stack size crashes in httpd</li> <li>updatedItems (to see what specifically has been updated)</li> </ul>"},{"location":"develop/sveltekit/#steps-made-to-make-sveltekit-ready-for-moonlight","title":"Steps made to make Sveltekit ready for MoonLight","text":"<p>This is a checklist, More info on most of the items can be found in the ESP32-Sveltekit specific documentation ESP32 SvelteKit, Build Tools, Front end and Back End</p> <ul> <li> <p>{custom} = MoonLight or name of a forked repo</p> </li> <li> <p>docs/media/</p> <ul> <li>add {custom}-logo.png (used in mkdocs.yml)</li> <li>replace favicon.png</li> </ul> </li> <li>factory_settings.ini<ul> <li>FACTORY_AP_SSID=\\\"{custom}-#{unique_id}\\\"</li> <li>FACTORY_AP_PASSWORD=\\\"\\\" (recommendation)</li> <li>FACTORY_NTP_TIME_ZONE_LABEL=\\\"Europe/Berlin\\\"</li> </ul> </li> <li>package.json<ul> <li>name = \"{custom}\"</li> <li>version: \"0.5.9.3\",</li> </ul> </li> <li>intrerface/source/lib/assets/logo.png<ul> <li>replace logo</li> </ul> </li> <li>interface/source/routes/+layout.ts<ul> <li>title: '{custom}'</li> <li>github:</li> <li>copyright</li> <li>appname: '{custom}'</li> </ul> </li> <li>interface/source/routes/+page.svelte<ul> <li>Welcome to {custom}</li> <li>Intro message</li> <li>href=\"/\" </li> <li>Start {custom}</li> </ul> </li> <li>interface/source/routes/menu.svelte<ul> <li>const discord = { href: 'https://discord.gg/TC8NSUSCdV', active: true };</li> </ul> </li> <li>interface/static/manifest.json<ul> <li>name: \"{custom}\"</li> </ul> </li> <li>interface/static/favicon.png<ul> <li>replace favicon.png</li> </ul> </li> <li>lib/framework/APSettingsService.h<ul> <li>FACTORY_AP_SSID \"{custom}-#{unique_id}\"</li> <li>FACTORY_AP_PASSWORD \"\"</li> </ul> </li> <li>mkdocs.yml<ul> <li>site_name: {custom}</li> <li>nav: {custom}</li> <li>repo_name and repo_url</li> <li>theme logo: media/{custom}-logo.png</li> <li>analytics: provider: google property: G-R6QYDG0126</li> <li>Copyright</li> </ul> </li> <li>platformio.ini<ul> <li>description = {custom}</li> <li>add [custom] build_flags and lib_deps</li> <li>APP_NAME=\\\"{custom}\\\" ;</li> <li>APP_VERSION=\\\"0.x.0\\\"</li> <li>CORE_DEBUG_LEVEL=4</li> </ul> </li> <li>README.md<ul> <li>Custom intro</li> </ul> </li> <li>vite.config.ts<ul> <li>Set target: 'http://192.168.1.xxx'</li> </ul> </li> <li>setup custom code<ul> <li>src/custom</li> <li>interface/src/routes/moonbase</li> <li>interface/src/lib/components/moonbase</li> <li>interface/src/lib/types/moonbase_model.ts</li> <li>interface/src/lib/stores/moonbase_utilities.ts</li> </ul> </li> <li>Github repo<ul> <li>change license</li> <li>change description</li> <li>change webhook</li> </ul> </li> </ul>"},{"location":"gettingstarted/hardware/","title":"Hardware","text":"<p>To get started the minimal you need is an esp32-device connected via USB to your computer and a LED-strip or panel connected via 3 wires to the vcc, ground and a supported GPIO pin of the esp32 (e.g. Pin 2). An ESP32-S3 is preferred as it has more memory to support large setups and Live Scripts. </p> <p>ESP32-D0</p> <p>Currently normal ESP32-devices (ESP32-D0, devices without PSRAM) are low on memory if MoonLight is installed. Therefor ESP32-D0-wrover or ESP32-S3 is recommended.</p>"},{"location":"gettingstarted/hardware/#minimal-hardware","title":"Minimal hardware","text":"<ul> <li>One of the ESP32-devices shown in MoonLight Web Installer. ESP32-S3 N16R8 recommended. Optional Expansion board 44pin</li> <li>Any WS2812 LED strip or panel. 256 LED panel recommended.</li> <li>Connect the ESP32-device with USB to your computer, connect the LED strip or panel</li> </ul> <p>Above is the minimum requirement to have lights burning.</p>"},{"location":"gettingstarted/hardware/#recommended-hardware","title":"Recommended hardware","text":"<p>The M5Stack AtomS3R will be used to offer 'MoonLight in a box'.  It is perfactly usable to drive Art-Net. To drive LEDs a few more components are needed:</p> Product Image Shop M5Stack AtomS3R Shop Level shifter SN74HCT125(N) Shop Resistors: 33 or 249 ohm see QuinLed - The Myth of the Data Signal Resistor External power supply Capacitors <p>Currently it is DIY to make it:</p> <p> </p> <p>Work in progress to make this available as pre-assembled board (Contact us if you want to help manufactering this).</p>"},{"location":"gettingstarted/hardware/#premade-boards","title":"Premade boards","text":"<ul> <li>QuinLed LED pre assembled boards</li> <li>Serg74 shields</li> <li>Wladi</li> <li>Athom / Gledopto / M5Stack / ...</li> <li>Stephan Electronics</li> </ul>"},{"location":"gettingstarted/hardware/#for-latest-dmx-support","title":"For latest DMX support","text":"Product Image Shop Artnet-LED-controller Shop Pknight Art-Net DMX 512 Shop 18 LED Bars Shop 19x15W Zoom Wash Lights RGBW Beam Moving Head Shop <p>To get an impression of hardware in use see the MoonLight in Concert video:</p>"},{"location":"gettingstarted/installation/","title":"Installation","text":""},{"location":"gettingstarted/installation/#moonlight-web-installer","title":"MoonLight Web installer","text":"<p>Install Moonlight onto an ESP32 microcontroller using the MoonLight Web installer</p> <p>Step 1: Get an ESP32 and a WS2812 LED-strip or LED-panel. See Hardware.</p> <p>Step 2: Connect the ESP32 via USB</p> <p>Step 3: Go to the MoonLight Web Installer. Select your ESP32-device, or if not listed, press others.</p> <p>Browser support</p> <p>The Web Installer works on Google Chrome or Microsoft Edge or similar browsers, not on Safari.</p> <p>Step 4: Connect to the ESP32-device</p> <p></p> <p>Step 5: Select Install MoonLight</p> <p></p> <p>Step 6: Optionally erase the ESP32-device</p> <p>Erase</p> <p>Erase if you have a new ESP32-device or want to start fresh. Do not erase if you want to update an existing MoonLight installation. Erase deletes all settings and requires to re-connect to MoonLight.</p> <p></p> <p>Step 7: Confirm and install</p> <p> </p> <p>Step 8: Optionally Press Logs and Console</p> <p></p> <p>Logging</p> <p>You can see the serial logging of the ESP32-device. In case you see nothing you can press reset device, now you should see the logging.</p>"},{"location":"gettingstarted/installation/#connect-moonlight","title":"Connect MoonLight","text":"<p>Step 1: Make a WiFi connection to the ESP32-device, it should present itself in the list of WiFi access points of your computer, phone or tablet.</p> <p></p> <p>Step 2: After connecting, MoonLight will show up in a web browser (all browsers supported). You will see this screen, select WiFi Station.</p> <p></p> <ul> <li>The device will show in 'Captive portal' mode. Alternatively you can close the captive portal and show it in a browser using http://4.3.2.1</li> </ul> <p>UI not showing when installing new version of MoonLight</p> <p>If you ran previous versions of MoonLight, the UI might not show up if it has been changed since then. In this case it is needed to reload the UI from the ESP32-device (use http://4.3.2.1)</p> <ul> <li>Chrome: Command Shift R (Mac) or Ctrl Shift R or Control Reload (Windows)</li> <li>Safari: Reload from Origin : Option Shift R</li> <li> <p>After this not all UI elements might be immediately visible. If you see 'MoonLight loading ...' in the browser, just wait a bit (\u2615\ufe0f)</p> </li> <li> <p>Sometimes it migh be needed to clear the browser cache:</p> <ul> <li>Chrome: Delete Browsing data / delete data (caching data)</li> <li> <p>Safari: Empty cache: Menu Develop (enable if not visible in the Safari Menu) / empty caches (Command Option E)</p> </li> <li> <p>More info: how to hard refresh your browser and clear cache</p> </li> </ul> </li> </ul> <p>Step 3: Enter your local WiFi network credentials and hostname:</p> <p></p> <p>Hostname</p> <p>The hostname will be used to access your device. E.g. if the hostname is ML-home you can access it using http://ml-home.local</p> <p>Step 4: Press Add Network and apply settings. After connecting to your normal WiFi network you will see this screen showing the new IP address of your MoonLight ESP32-device. </p> <p></p> <p>Step 5: When connected to your local WiFi network, enter the IP address of the new device. Alternatively enter the hostname.</p> <p>Using hostname</p> <ul> <li>Restart the device to make the hostname known to your network (go to system status, scroll down and press restart)</li> <li>Enter the hostname in your browser e.g. http://ml-home.local</li> </ul> <p>reload UI</p> <p>See step 2 \u26a0\ufe0f if UI is not showing up, use http://ml-home.local (replace ml-home with the hostname) or the IP address.</p>"},{"location":"gettingstarted/installation/#setup-moonlight","title":"Setup MoonLight","text":"<p>Step 1: Add an effect</p> <p></p> <p>Step 2: Add a layout and set pin(s)</p> <p></p> <ul> <li>Add a layout Node by pressing the blue + button and select on off the \ud83d\udea5 options (Panel \ud83d\udea5 is a safe bet to start with). Scroll down to the Pin Control field and enter the pin number(s) you connected the strip or panel to. </li> </ul> <p>Monitor</p> <p>The Monitor should now show the effect</p> <p>Step 3: Add a driver</p> <p></p> <ul> <li>Add a driver node by pressing the blue + button and select one of the \u2638\ufe0f options.</li> </ul> <p>Strip or panel</p> <p>The LEDs on your strip or panel should now show the effect</p> <p>Choose driver</p> <p>FastLED driver is best to start with if you have a normal (ws2812) LED strip or panel. Choose the Physical driver if you have more then 4 LED strips or panels or non standard LEDS (e.g. RGBW lights, curtains...). Other drivers (Virtual, Hub,) not supported yet. In some cases restart the device to make layout changes effective is needed.</p> <p>Step 4: Press save (\ud83d\udcbe). Saves your setup to the file system, so if a device is restarted, your settings are still there.</p> <p>Next steps</p> <ul> <li>You can now change effect or add effects, modifiers, layouts and drivers</li> <li>Go to MoonLigh Overview</li> <li>press the ? in MoonLight to go directly to the relevant page</li> </ul>"},{"location":"gettingstarted/installation/#update-moonlight","title":"Update MoonLight","text":"<ul> <li> <p>The preferred way to update MoonLight is via System update</p> <p></p> <ul> <li>Download from GitHub</li> <li>Upload from file. From a GitHub release, or created by VSCode, see Develop / Installation</li> </ul> </li> <li> <p>To install the latest release, you can also use the MoonLight Web Installer (no need to erase the device if updating)</p> </li> <li>Upload directly from VSCode, see Develop / Installation</li> </ul>"},{"location":"gettingstarted/overview/","title":"Getting Started Overview","text":"<ul> <li>Install MoonLight</li> <li>Hardware</li> <li>Run MoonLight<ul> <li>Lights control</li> <li>Effects</li> <li>Drivers</li> </ul> </li> </ul>"},{"location":"gettingstarted/overview/#sitemap","title":"Sitemap","text":"<p>MoonLight documentation (this site) is organised as follows:</p> <ul> <li>Home: General introduction of MoonLight</li> <li>Getting Started: Getting started with MoonLight</li> <li>MoonLight, MoonBase, Connections, WiFi, System: Help per module (MoonLight contains links to these pages)</li> <li>Develop: Info on developing for MoonLight</li> <li>ESP32 Sveltekit, Build Tools, Front End, Back End: Information about the foundation of MoonLight, ESP32-Sveltekit, aimed at developers.</li> </ul>"},{"location":"moonbase/devices/","title":"Devices module","text":"<p>Sends and receives UDP messages over the network to see which other devices are there (WLED compatible). </p> <ul> <li>Device name: name of this device</li> <li>Devices: Devices found on the network<ul> <li>Click on IP to jump to the device</li> </ul> </li> <li>Statusbar and HTML title display the device name</li> </ul>"},{"location":"moonbase/filemanager/","title":"File Manager","text":"<ul> <li>Navigate through folders</li> <li>create files and folders</li> <li>edit and upload files (see FileEdit)</li> <li>Option to show hidden files (files starting with . e.g. .config)</li> </ul>"},{"location":"moonbase/inputoutput/","title":"IO Module","text":"<p>Shows info about input / output devices, e.g. GPIO pins.</p> <ul> <li>Per pin:<ul> <li>GPIO = gpio_num;</li> <li>PinInfo : pin assignments: currently only static \ud83d\udea7</li> <li>Summary</li> <li>Valid (\u2705)</li> <li>Output (\ud83d\udca1)</li> <li>RTC (\u23f0);</li> <li>Level (HIGH, LOW, N/A)</li> <li>DriveCap (WEAK, STRONGER, MEDIUM, STRONGEST, N/A)</li> </ul> </li> </ul>"},{"location":"moonbase/overview/","title":"MoonBase Overview","text":"<ul> <li>File Manager</li> <li>Devices</li> <li>Tasks</li> <li>IO</li> </ul>"},{"location":"moonbase/overview/#status-bar","title":"Status Bar","text":"<ul> <li> <p>Safe Mode: MoonBase will jump into safe mode after a crash, see \ud83d\udee1\ufe0f in the statusbar or System Status. In safe mode, MoonLight will disable the following features:</p> <ul> <li>Add more then 1024 lights</li> <li>Start LED drivers</li> <li>Execute a live script</li> </ul> <p>Clicking on the \ud83d\udee1\ufe0f icon allows you to restart. If the reason for crash has dissappeared the device will start normally (not in safe mode).</p> </li> <li> <p>Restart needed: e.g. when drivers are changed, a restart might be needed, see \ud83d\udd04 in the statusbar. Clicking on the \ud83d\udd04 icon allows you to restart</p> </li> <li> <p>Save and Cancel Changes are only saved after pressing the save button \ud83d\udcbe. To undo changes, press the cancel button \ud83d\udeab and the last saved state will be restored.</p> </li> <li> <p>Theme: Light, Dark, Auto</p> </li> <li> <p>Energy: Show charging status (voltage and current), only enabled at some boards (e.g. SE16)</p> </li> <li> <p>New firmware: New firmware available.</p> </li> <li> <p>Wifi: See ESP32-Sveltekit</p> </li> </ul>"},{"location":"moonbase/tasks/","title":"Tasks module","text":"<p>Shows system tasks info.</p> <ul> <li>Core 0: which task is currently running on core 0</li> <li> <p>Core 1: which task is currently running on core 1</p> </li> <li> <p>Per task:</p> <ul> <li>name: task name</li> <li>Summary</li> <li>state: Ready (\ud83e\uddcd\u200d\u2642\ufe0f), Running (\ud83c\udfc3\u200d\u2642\ufe0f), Blocked (\ud83d\udea7), Suspended (\u23f8\ufe0f), deleted (\ud83d\uddd1\ufe0f), unknown (\u2753)</li> <li>cpu: percentage of CPU time (per core) used</li> <li>prio: task priority</li> <li>stack: stack left</li> <li>runtime: amount of cpu cycles consumed</li> <li>core: allocated core, not necessarily used core (see above)</li> </ul> </li> </ul>"},{"location":"moonbase/tasks/#default-stack-sizes","title":"Default stack sizes","text":"Task name (runtime) Kconfig option Default stack size (words \u2192 bytes) Notes AppEffectTask (psramFound()?6:4) * 1024 AppDriverTask (psramFound()?4:3) * 1024 wifi (Wi-Fi driver) <code>CONFIG_ESP_WIFI_TASK_STACK_SIZE</code> 3072 words \u2192 12288 bytes \u2192 12 KB Handles Wi-Fi MAC/driver. Needs extra headroom. tiT (TCP/IP / lwIP task) <code>CONFIG_TCPIP_TASK_STACK_SIZE</code> 3072 words \u2192 12288 bytes \u2192 12 KB All socket callbacks, DHCP, etc. event (ESP event loop) <code>CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE</code> (older) / <code>CONFIG_ESP_EVENT_LOOP_TASK_STACK_SIZE</code> (newer) 2048 words \u2192 8192 bytes \u2192 8 KB Dispatches Wi-Fi/IP/BLE events. esp_timer (high-res timers) <code>CONFIG_ESP_TIMER_TASK_STACK_SIZE</code> 1024 words \u2192 4096 bytes \u2192 4 KB Runs high-resolution callback handlers (timers/timeouts). ipc0 / ipc1 (cross-core IPC) <code>CONFIG_ESP_IPC_TASK_STACK_SIZE</code> 1024 words \u2192 4096 bytes \u2192 4 KB Used for cross-CPU calls / IPC. main (<code>app_main</code>) <code>CONFIG_ESP_MAIN_TASK_STACK_SIZE</code> 3584 words \u2192 14336 bytes \u2192 14 KB Your entry point task. Idle tasks (fixed) ~768 bytes each (per CPU) System FreeRTOS idle tasks. Timer service task <code>CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH</code> 2048 words \u2192 8192 bytes \u2192 8 KB FreeRTOS software timers (xTimer). Arduino loop task (if using Arduino core) <code>CONFIG_ARDUINO_LOOP_STACK_SIZE</code> 8192 bytes \u2192 8 KB Present when Arduino core is used as a component. btc_task (classic BT) <code>CONFIG_BT_BTC_TASK_STACK_SIZE</code> 3072 words \u2192 12288 bytes \u2192 12 KB Only if Bluetooth Classic enabled. btu_task (BT controller) <code>CONFIG_BT_BTU_TASK_STACK_SIZE</code> 4096 words \u2192 16384 bytes \u2192 16 KB Heaviest Bluetooth controller task (if BT enabled). BLE host task <code>CONFIG_BT_BLE_HOST_TASK_STACK_SIZE</code> 3072 words \u2192 12288 bytes \u2192 12 KB Only if BLE enabled."},{"location":"moonlight/channels/","title":"Channels","text":"<p>Shows each channel within the light array. e.g. for a LED strip or panel each light is 3 (or 4 in case of RGBW) channels. For multichannel lights like Moving heads. If you hover over a channel, that channel will output a value - by this you can reverse engineer positions of existing lights, e.g. when you output to an unknown DMX setup.</p> <ul> <li>View: select between physical layer and virtual layer(s)</li> <li>Group: group all channels in a light as one button. Pressing the button sets all the channels to max</li> <li>Universe: Change the range of channels to control - \ud83d\udea7!</li> </ul> <p>Choosing the virtual layer and hovering over the channels is a good way to test effect modifiers</p> <p>hint: do not run effects when using the channels module as they will also fill the channels with data (set them to off in the Effects module)</p>"},{"location":"moonlight/drivers/","title":"Drivers module","text":""},{"location":"moonlight/drivers/#overview","title":"Overview","text":"<p>The Drivers module defines layers and drivers.</p> <ul> <li>Layout \ud83d\udea5: A layout (\ud83d\udea5) defines the positions of the lights to control. See Layouts</li> <li>Driver \u2638\ufe0f: A driver is a link between MoonLight to hardware or the network. Drivers can both input data or output data. Examples:<ul> <li>LED drivers (FastLED, Physical and Virtual drivers, hub75 panels)</li> <li>Light driver (Art-Net / DMX)</li> <li>Audio driver</li> <li>Sensor drivers (microphone, gyro, MIDI controller)</li> </ul> </li> </ul>"},{"location":"moonlight/drivers/#controls","title":"Controls","text":"<ul> <li>Nodes: a list of Layouts and Drivers<ul> <li>Nodes can be added (+), deleted (\ud83d\uddd1\ufe0f) or edited (\u270e) or reordered (drag and drop). The node to edit will be shown below the list, press save (\ud83d\udcbe) if you want to preserve the change when the device is restarted</li> <li>Reorder: Nodes can be reordered, defining the order of execution<ul> <li>Layouts: Need to be before drivers, multiple layouts can be added</li> <li>Drivers: After Layouts, choose one LEDs driver and optionally add Art-Net and Audio Sync, reordering might need a restart.</li> </ul> </li> <li>Controls. A node can be switched on and off and has custom controls, which defines the behaviour of the node </li> <li>See below for a list of existing Layouts and Drivers</li> </ul> </li> </ul>"},{"location":"moonlight/drivers/#driver-nodes","title":"Driver \u2638\ufe0f nodes","text":"<p>Below is a list of Drivers in MoonLight.  Want to add a Driver to MoonLight, see develop. See also Live scripts to add runtime drivers.</p> Name Preview Controls Remarks Physical LED Driver Drive multiple LED types, all devices including ESP32-P4(-nano) supportedMax Power and Light preset: See belowDMA buffer: set higher when LEDs flicker FastLED Driver Most used LED driver. Drive most common LEDs (WS2812).Max Power: See below Art-Net Drive LEDS and DMX lights over the network. See below AudioSync No controls Listens to audio sent over the local network by WLED-AC or WLED-MM and allows audio reactive effects (\u266a &amp; \u266b) to use audio data (volume and bands (FFT)) Virtual LED Driver Driving max 120! outputs. E.g. 48 panels of 256 LEDs each run at 50-100 FPS using shift registersNot implemented yet HUB75 Driver Drive HUB75 panelsNot implemented yet IR Driver \ud83c\udd95\ud83d\udea7 Receive IR commands and Lights Control"},{"location":"moonlight/drivers/#max-power-and-light-preset","title":"Max Power and Light Preset","text":"<ul> <li> <p>Max Power: max amount of power in watts to send to LEDs. Default 10: 5V * 2A = 10W (so it runs fine on USB)</p> </li> <li> <p>Light preset: Defines the channels per light and color order</p> <p></p> </li> </ul> <p>Same Light preset</p> <p>Currently, if using multiple drivers, all drivers need the same Light preset !!</p> <ul> <li>RGB to BGR: 3 lights per channel, RGB lights, GRB is default</li> <li>GRBW: LEDs with white channel like SK6812.</li> <li>RGBW: for Par/DMX Lights</li> <li>GRB6: for LED curtains with 6 channels per light (only rgb used)</li> <li>RGBWYP: Compatible with DMX 18x12W LED RGBW/RGBWUAV (RGBW is 4x18=72 channels, RGBWUAV is 6x18=104 channels). Currently setup to have the first 36 lights 4 channel RGBW, after that 6 channel RGBWYP ! Used for 18 channel light bars</li> <li>MH*: Moving Heads lights<ul> <li>MHBeTopper19x15W-32: BeTopper / Big Dipper</li> <li>MHBeeEyes150W-15: Bee eyes</li> <li>MH19x15W-24: 19x15W Zoom Wash Lights RGBW Beam Moving Head</li> </ul> </li> </ul> <p>Custom setup</p> <p>These are predefined presets. In a future release custom presets will be possible.</p>"},{"location":"moonlight/drivers/#art-net","title":"Art-Net \u2638\ufe0f","text":"<p>Sends Lights in Art-Net compatible packages to an Art-Net controller specified by the IP address provided.</p>"},{"location":"moonlight/drivers/#controls_1","title":"Controls","text":"<ul> <li>Controller IP: The last segment of the IP address within your local network, of the the hardware Art-Net controller.</li> <li>Port: The network port added to the IP address, 6454 is the default for Art-Net.</li> <li>FPS Limiter: set the max frames per second Art-Net packages are send out (also all the other nodes will run at this speed).<ul> <li>Art-Net specs recommend about 44 FPS but higher framerates will work mostly (up to until ~130FPS tested)</li> </ul> </li> <li>Nr of outputs: Art-Net LED controllers can have more then 1 output (e.g. 12)</li> <li>Universes per output: How many universes can each output handle. This determines the maximum number of lights an output can drive (nr of universe x nr of channels per universe / channels per light)</li> </ul> <p>Set universes</p> <p>Set the number of universes also on the controller!</p> <ul> <li>Channels per ouput: each output can drive a maximum number of channels, determined by the universes per output</li> </ul> <p>DMX start with 1</p> <p>Dmx channels count from 1 to 512. At the moment we start counting from 0..511.</p>"},{"location":"moonlight/drivers/#recommended-art-net-controllers","title":"Recommended Art-Net controllers","text":"<p>The following devices have been tested and are recommended:</p> <p>PKNight ArtNet2-CR021R</p> <p></p> <ul> <li>Driving DMX fixtures: Used to drive the Light Presets for DMX lights / moving heads (see below)</li> <li>Nr of outputs: max 2 outputs</li> <li>Universes per output: 1 universe</li> <li>Channels per ouput:  512 channels</li> </ul> <p>Club Lights 12 Pro Artnet Controller - CL12P</p> <p></p> <ul> <li> <p>Driving LEDs: : 12 output leds controller, max 8 universes per channel. Max 512 channels per universe. Select IC-Type UCS2903</p> </li> <li> <p>Nr of outputs: Max 12 outputs</p> </li> <li>Universes per output: Max 8 universes</li> <li>Channels per ouput: max 8 * 512. </li> </ul> <p>Each color in a LED is one channel: For RGB max 170 LEDs is 510 channels per universe, for RGBW max 128 LEDs per universe is 512 channels per universe =&gt; max 1360 RGB LEDs and 1024 RGBW LEDs per output. </p> <p>channels per universe</p> <p>Set channels per universe to 510 for RGB and 512 for RGBW (no proof yet it makes a difference ...) on the controller. </p> <p>The real number of channels per output can be less then the amount of universes available. e.g. if each output drives one 256 LED RGB panel, channels per output is 768. One package (= one universe) sends 170 LEDs (510 channels) and the second 86 LEDs / 256 channels. The next package for the next panel on the next output will then be in the first universe for that output (so unused universes for a channel will be skipped)</p>"},{"location":"moonlight/effects/","title":"Effects module","text":""},{"location":"moonlight/effects/#overview","title":"Overview","text":"<p>The Effects module defines Effects and Modifiers. They run in a 'layer'. </p> <ul> <li>Effect \ud83d\udd25: An animation running in a layer, see below for am overview of effects. Effects can run in 1D, 2D or 3D coordinate spaces.</li> <li>Modifier \ud83d\udc8e: An effect on an effect e.g. mirror, multiply or rotate. See Modifiers</li> <li>Layer: An area on a (LED) display. Effects and modifier run in this area. Each layer maps a coordinate space to the display</li> </ul> <p>One layer</p> <p>Until v0.6.0 there is only one layer, projected on the whole display. Multiple layers is planned after v0.6.0</p> <p>3D</p> <p>MoonLight is build from the ground to support 3D. First there where LED strips, later LED matrices and now also 3D shapes like spheres or cubes, making it suitable for art-installations. 1D and 2D objects can be seen as 3D objects where some dimensions have a width of 1. Most effects are 1D or 2D, they will slowly be adapted to support also 3D. Modifiers can be used to project 1D on 2D or 2D on 3D layouts.</p>"},{"location":"moonlight/effects/#controls","title":"Controls","text":"<ul> <li>Layer: Choose the layer (currently only one layer supported)<ul> <li>Start, End and Brightness: read only for now, when multiple layers are implemented (&gt;v0.6.0), these can be set per layer</li> </ul> </li> <li>Nodes: a list of Effects and Modifiers for a specific layer<ul> <li>Nodes can be added (+), deleted (\ud83d\uddd1\ufe0f) or edited (\u270e) or reordered (drag and drop). The node to edit will be shown below the list, press save (\ud83d\udcbe) if you want to preserve the change when the device is restarted or you want to save as a preset (see Light Control)</li> <li>Reorder: Nodes can be reordered, defining the order of execution<ul> <li>Effects: which effect on top of the other effect.</li> <li>Modifiers: which modifier is done first, e.g. circle then multiply will yield to a different result than multiply then circle</li> </ul> </li> <li>Controls. A node can be switched on and off and has custom controls, which defines the behaviour of the node (e.g. effect speed).</li> <li>See below for a list of existing Effects and Modifiers</li> </ul> </li> </ul>"},{"location":"moonlight/effects/#effect-nodes","title":"Effect \ud83d\udd25 Nodes","text":"<p>Below is a list of effects in MoonLight. Want to add an effect to MoonLight, see develop. See also Live scripts to add runtime effects.</p>"},{"location":"moonlight/effects/#moonlight-effects","title":"MoonLight effects","text":"<p>These effects have first been created in MoonLight:</p> Name Preview Controls Remarks Solid Can be used as background to other effects when ordered before other effects Lines To test a layout Frequency Saws \u266b Moon Man No controls only on devices supporting M5 library, e.g. AtomS3R Particles \ud83e\uddca Supports Gyro \ud83d\udea7 Rainbow Random Ripples \ud83e\uddca Rubiks Cube \ud83e\uddca Scrolling Text Preset: Auto, IP (.ddd), FPS (ddds), Time (HHMM), Uptime (s/m/h), Status \ud83d\udedc (AP/STA), Clients \ud83d\udedc (dC), Connected \ud83d\udedc (dCC) Sinus Sphere Move \ud83e\uddca StarField Praxis Wave Type: Saw, Triangle, Sinus, Square, Sin3, Noise Fixed Rectangle To test a layout"},{"location":"moonlight/effects/#moonmodules-effects","title":"MoonModules effects","text":"<p>The following effects are created by the MoonModules team, mostly first in WLED-MM and enhanced in MoonLight:</p> Name Preview Controls Remarks GEQ 3D \u266b 2D effect PaintBrush \u266b \ud83e\uddca Game Of Life \ud83e\uddca"},{"location":"moonlight/effects/#wled-effects","title":"WLED effects","text":"<p>The following effects originated from WLED, most have been enhanced in WLED-MM and further enhanced in MoonLight:</p> Name Preview Controls Remarks Blackhole Bouncing Balls Blurz \u266b Distortion Waves Frequency Matrix \u266a Not really a matrix ... GEQ \u266b Lissajous Noise 2D Noise Meter \u266a PopCorn \u266a Waverly \u266a"},{"location":"moonlight/effects/#moving-head-effects","title":"Moving head effects","text":"<p>The following effects are created in MoonLight, supporting driving Moving Heads over Art-Net:</p> <p>Select Moving heads in light presets, see Light presets</p> Name Preview Controls Remarks Troy1 Color \u266b Troy1 Move \u266b Troy2 Color \u266b Troy2 Move \u266b FreqColors \u266b Wowi Move \u266b Ambient Move \u266b"},{"location":"moonlight/layouts/","title":"Layouts","text":"<p>A layout (\ud83d\udea5) defines the positions of lights connected to a MoonLight device.</p> <ul> <li>The coordinates of each light are defined in a 3D coordinate space <ul> <li>Coordinates needs to be specified in the order the lights are wired so MoonLight knows which light is first, which is second etc.</li> <li>For lights in a straight line (1D, e.g. LED strips or a LED bar), specify coordinates as [x,0,0] </li> <li>For lights in a flat area (2D, e.g. LED matrix), specify coordinates as [x,y,0] </li> </ul> </li> <li>Multiple layout nodes can be defined which will be mapped in the order of the layouts</li> <li>MoonLight will use the layout definition to generate a mapping of the effects to a real world light layout. Most simple example is a panel which has a snake layout. The mapping will create a layer for effects where the snake layout is hidden.</li> <li>Layouts also assign groups of LEDs to esp32 GPIO pins.</li> </ul>"},{"location":"moonlight/layouts/#layout-nodes","title":"Layout \ud83d\udea5 Nodes","text":"<p>Below is a list of Layouts in MoonLight.  Want to add a a Layout to MoonLight, see develop. See also Live scripts to add runtime effects.</p> Name Preview Controls Remarks Panel Defines a 2D panel with width and heightWiring Order (orientation): horizontal (x), vertical (y), depth (z)X++: starts at Top or bottom, Y++: starts left or rightsnake aka serpentine layout Panels Panel layout + Wiring order, directions and snake also for each panel Cube Panel layout + depth Z++ starts front or backmultidimensional snaking, good luck \ud83d\ude1c Rings 241 LEDs in 9 rings Wheel Human Sized Cube Single Line Single Row SE16 Layout(s) including pins for Stephan Electronics 16-Pin ESP32-S3 boardsee below <p>Choosing pins</p> <p>Choose the right pins with care. See also the IO module to see which pins can in general be used for LEDs (\ud83d\udca1). But depending on a specific boards some pins might also be in use already. </p> <p>Multiple layouts</p> <p>Single line, single row or panel are suitable layouts to combine into a larger fixture.</p>"},{"location":"moonlight/layouts/#se16","title":"SE16","text":"<p>16 channel LED strip driver by Stephane Electronics</p> <p></p> <ul> <li>Leds Per Pin: the number of LEDs connected to each pin</li> <li>Pins Are Columns: are the LEDs on a pin a row of the effect (width is 1 (or 2) x ledsPerPin). If not set the LEDs are a column (height is 1 (or 2) x ledsPerPin)</li> <li>Mirrored Pins: If set it is assumed that LEDs are connected with increasing positions on 8 pins on one side of the board and decreasing positions on the 8 pins of the other side of the board. The resulting size will have a width of 8 and the height (or width) will be 2 * ledsPerPin. If not set, the width will be 16 and the height (or width) = ledsPerPin</li> <li>Pins: 47,48,21,38,14,39,13,40,12,41,11,42,10,2,3,1</li> </ul>"},{"location":"moonlight/lightscontrol/","title":"Lights Control module","text":"<p>Controls:</p> <ul> <li>On: lights on or off</li> <li>Brightness: brightness of the LEDs when on</li> <li>RGB Sliders: control each color separately.</li> <li>Palette: Global palette setting. Effects with the palette icon \ud83c\udfa8 use this palette setting.</li> <li>Presets: Store the current effects or retrieve earlier saved presets. 64 slots available:<ul> <li>Blue: Empty preset</li> <li>Green: Saved preset <ul> <li>Hover with the mouse to see effects and modifiers in the preset</li> <li>Double click on a saved preset to delete the preset.</li> </ul> </li> <li>Red: Selected preset</li> <li>\ud83d\udea8: Save (\ud83d\udcbe) or cancel (\ud83d\udeab effects first, before storing them as a preset!</li> </ul> </li> <li>Preset loop: loop over presets (seconds per presets)</li> <li>Monitor On: sends LED output to the monitor.</li> </ul> <p>Light Controls is the interface to control lights for the UI, but also for all protocols eg. HA, DMX, Hardware buttons, displays etc e.g. a DMX controller, can control presets, but not individual preset details.</p>"},{"location":"moonlight/livescripts/","title":"Live Scripts module","text":"<p>MoonLight is based on nodes (see Effects and Drivers) where each node can run precompiled layouts, effects or modifiers but alternatively, each node can also run a live script, uploaded on the esp32 file system (.sc files). Currently this only works on esp32-S3 boards as normal esp32 boards do not have enough memory to flash MoonLight with the Live Scripts option.</p> <p>This module shows all running live scripts</p> <ul> <li>Scrips: Running Live scripts (\ud83d\udea7)</li> <li>Press the edit button to stop start or kill a script (current bug: double click the button)</li> </ul>"},{"location":"moonlight/livescripts/#how-to-run-a-live-script","title":"How to run a live script","text":"<p>Step 1: Select Moonbase / File Manager from the menu and select a location to store live scripts. Create a folder if needed (press the second + button):</p> <p></p> <p>Step 2: Go to this folder and create a file (press the first + button). Give the file a name ending with .sc and enter the code. See github livescripts for example scripts (E_.sc files are effects L_.sc files are layouts). Alternatively you can also upload a live script with by pressing the Upload File button. Press save:</p> <p></p> <p>Step 3: Select MoonLight / Effects or MoonLight / Drivers from the menu. Create a new effect node (\ud83d\udd25) by pressing the + button or update an existing effect node (\ud83d\udd25) by pressing the \u2710-button. Open the drop down and scroll to the bottom where live script files are shown</p> <p></p> <p>Step 4: Select the script, the script will be compiled (takes a second or so) and executed. You can see the effect controls on the bottom of the screen (speed and branches in this example), change them to customise the effect: </p> <p></p> <p>Step 5: Live scripts can be edited in the node press the \u2710-button of a live script node and press the v next to Edit  and the same edit window as in Step 2 opens. Do your edits and press save. The  script recompiles and will restart the effect. (Alternatively if a script is running and you edit a file in the file manager, the script will also recompile and rerun). For a list of functions currently supported, see live script functions. This list is dynamic and will increase overtime, send a ping if you would like function(s) to be added. <p></p> <p>Step 6: An overview of running live scripts can be found in MoonLight / LiveScripts </p>"},{"location":"moonlight/livescripts/#examples","title":"examples","text":""},{"location":"moonlight/livescripts/#pantilt-script","title":"PanTilt script","text":"<ul> <li>Sends a beatsin to Pan and Tilt which can be sent to Moving Heads (add a Moving head layout node to configure the MHs)</li> <li>Controls: BPM, Middle Pan and Tilt, Range and invert</li> <li>Usage: Add this effect if moving heads are configured. RGB effects can be added separately e.g. wave to light up the moving heads in wave patterns</li> <li>See E_PanTilt</li> <li>Run script see How to run a live script</li> </ul>"},{"location":"moonlight/modifiers/","title":"Modifiers","text":"<p>A modifier (\ud83d\udc8e) is an effect on an effect. It can change the size of the effect layer, and moves effect effect pixels around (e.g. rotate) or expand to other dimensions, e.g. a line can become a circle.</p> <p>Tip</p> <p>Multiple modifiers can be defined per layer. The order of multipliers matter e.g. rotate then multiply is different then multiply then rotate.</p>"},{"location":"moonlight/modifiers/#modifier-nodes","title":"Modifier \ud83d\udc8e Nodes","text":"<p>Below is a list of Modifiers in MoonLight.  Want to add a Modifier to MoonLight, see develop. See also Live scripts to add runtime Modifiers.</p> <p>The following Modifiers are defined in MoonLight. Some found there origin in WLED and WLED-MM (Expand1D):</p> Name Preview Controls Remarks Multiply \ud83e\uddca Mirror \ud83e\uddca Transpose \ud83e\uddca Circle Rotate Checkerboard Pinwheel \ud83e\uddca Projects 1D/2D effects onto 2D/3D layouts in a pinwheel pattern.Swirl: bend the pinwheelRotation Symmetry: rotational symmetry of the patternPetals Virtual widthZtwist twist the pattern along the z-axisHeight: distance from center to corner RippleYZ \ud83e\uddca 1D/2D effect will be rippled to 2D/3D (\ud83d\udea8)Shrink: shrinks the original size towards Y and Z, towardsY: copies X into Y, towardsZ: copies XY into Z <p>\ud83d\udea8: some effects already do this theirselves e.g. FreqMatrix runs on 1D but copies to 2D and 3D if size allows.</p>"},{"location":"moonlight/moonlightinfo/","title":"MoonLight info","text":"<p>Shows info about the physical and virtual layer</p> <ul> <li>NrOfLights: the nr of lights defined in the layer</li> <li>Channels per light: e.g. normal RGB strip/panel is 3 channels per light</li> <li>Max channels: Max channels availeble (61440x3 for boards with PSRAM (120 pins x 512 LEDs), 4096x3 for other boards -&gt; 12288 / 4096 RGB LEDs)</li> <li>Size: the outer bounds of the fixture, e.g. for a 16x16 panel it is 16x16x1</li> <li>Nodes: the total number of effects, modifiers, layouts and drivers</li> <li>Layers: The virtual layers defined (currently only 1)<ul> <li>NrOfLights and size: virtual layer can differ from the physical layer (.e.g when mirroring it is only half)</li> <li>Mapping table#: nr of entries in the mapping table, is the same is nr of virtual pixels</li> <li>nrOfZeroLights: the number of lights which are not mapped to a physical pixel (color is stored in the mapping table)</li> <li>nrOfOneLight: The number of lights which have a 1:1 mapping between physical and virtual (if no modifier all is phys)</li> <li>Mapping table indexes: The number of physical lights which are in a 1:many mapping</li> <li>nrOfMoreLights: the number of virtual lights which are in a 1:many mapping</li> <li>Nodes#: The number of nodes assigned to a virtual layer (currently all)</li> </ul> </li> </ul>"},{"location":"moonlight/overview/","title":"MoonLight Overview","text":"<p>MoonLight is an open-source lighting platform that scales from art installations to professional stages.</p> <p>Drive lots of lights or thousands of LEDs with stunning effects running on ESP32 microcontrollers. For creators who demand professional results without enterprise costs. Scales from small installations to large displays.</p> <p></p> <p>MoonLight consist of the following modules:</p> <ul> <li>Lights control</li> <li>Effects</li> <li>Drivers</li> <li>Channels</li> <li>Live Scripts</li> <li>MoonLight info</li> </ul>"},{"location":"moonlight/overview/#moonlight-by-moonmodules","title":"MoonLight by MoonModules","text":"<p>MoonLight is created by MoonModules. MoonModules is a collective of light artist, hardware- and software developers. We love creating DIY lighting solutions based on microcontrollers, mainly ESP32. Our work can be found on GitHub and we use mainly Discord for communications. We develop our products for a large community of light enthousiasts and make products we show to the world, e.g. on art-exhibitions, in venues, or at festivals. See also about. Our flagship product is WLED-MM, a fork of WLED focussing on driving more LEDs, new platforms (e.g. ESP32-P4), better audio and so on. As currenyly most of the MoonModules team are also core developers of WLED, WLED-MM functionality is slowly moving to WLED.</p> <p>Started in 2023 we are also developing a new product based on our experience working with WLED called MoonLight. MoonLight is a modern alternative to WLED, with a modern UI, supporting 1D, 2D and 3D layouts, effects and modifiers, live scripts and led drivers.</p>"},{"location":"moonlight/overview/#why-moonlight","title":"Why MoonLight","text":"<p>So why build MoonLight when we already have WLED(-MM)?</p> <p>This is a personal overview by me (ewowi). It\u2019s not meant to burn down WLED, quite the opposite. I worked on it for years (mainly on 2D: first in WLED SR, then in WLED/WLED, and later in WLED-MM) and I was, and still am, deeply impressed with what it offers. But along the way I ran into some limitations that eventually convinced me to start MoonLight.</p> <ul> <li> <p>UI: extending or modifying the UI is difficult, not only because the code is complex and non-intuitive, but also because of memory and flash constraints. On top of that, WLED has two UI systems: one for the main screen, and another for setup/configuration, which adds complexity. The UI stack is \u201cclassic\u201d HTML, JavaScript, and CSS, without modern concepts like reactive frameworks.</p> </li> <li> <p>ESP8266 support: WLED still supports ESP8266, and that legacy support complicates the codebase a lot. MoonLight takes a different stance: if you need ESP8266, use an older WLED release. But don\u2019t hold back development for it, most advanced features won\u2019t fit on the ESP8266 anyway.</p> </li> <li> <p>Outdated libraries: WLED relies on older versions of FastLED, ArduinoJson, ESP-IDF, and others. MoonLight\u2019s philosophy is to keep libraries up to date. \u201cDon\u2019t change what works\u201d only delays the inevitable, you\u2019re forced to upgrade eventually.</p> </li> <li> <p>Effects and fixture dimensions: WLED effects are designed around 1D and 2D, with a lot of hardcoding. MoonLight supports up to 3D at the core, with no hardcoded constraints. An effect doesn\u2019t \u201cknow\u201d the fixture or its size, so you can run a 1D effect on 3D, or 2D on 1D, without issues. MoonLight doesn\u2019t use effect IDs, an effect is a class (Node). Modifiers, layouts, and drivers are also Node types. This eliminates hacks like shared data, limited effect controls, effect metadata, virtual strips, expand1D, etc. (some of which I originally introduced in WLED, sorry \ud83d\ude1c).</p> </li> <li> <p>Mapping system: WLED\u2019s mapping is based on strips and panels, and requires hacks to handle shapes like rings or hexagons. 3D isn\u2019t supported. MoonLight uses \u201cinverse mapping\u201d: instead of placing LEDs on a grid, you just define their coordinates, and the system maps everything internally.</p> </li> <li> <p>Technical debt: WLED has accumulated a lot of code that \u201cjust evolved.\u201d Audio reactive is the clearest example. It\u2019s hard to maintain, and in practice only a few people really can. WLED started with a strong architecture, but that hasn\u2019t evolved much over time. (Yes, I share some of the blame \ud83d\ude48)</p> </li> <li> <p>Too big to change: WLED has grown so large, with so many users, that making deep architectural changes is nearly impossible. The last major thing I worked on in WLED (2023) was \u201cSuperSync\u201d, linking multiple microcontrollers to drive a single fixture, inspired by drone swarms. I quickly hit the system\u2019s boundaries, and the plans we had seemed unachievable within WLED.</p> </li> <li> <p>What I love most in WLED: UserMods \u2764\ufe0f! Small, isolated pieces of code you can enable or disable, each with its own UI integration. This makes WLED incredibly versatile, with a huge library of UserMods. MoonLight originally was named \u201cStarMod\u201d (or *Mod: everything as a module). That idea evolved into the Nodes class: self-contained objects that initialize, run, expose controls, and can be destructed.</p> </li> </ul>"},{"location":"moonlight/overview/#current-status","title":"Current status","text":"<p>As of fall 2025, MoonLight can best be described as having its foundation solidly in place.</p> <p>Earlier releases involved major structural changes that often required fresh installs or renaming. Future updates should generally work seamlessly without erasing existing settings, though major version upgrades might still include exceptions.</p> <p>MoonBase now serves as a flexible foundation for any IoT project, while MoonLight provides a ready-to-use, plug-and-play application built on top of it.</p> <p>That doesn\u2019t mean the work is done, quite the opposite. This is just the beginning. MoonLight began as a solo project, but it\u2019s open for collaboration. You\u2019re warmly invited to help shape its future; check out the Develop pages to learn how to get started.</p>"},{"location":"moonlight/overview/#what-has-been-done-so-far","title":"What has been done so far","text":"<p>MoonBase</p> <ul> <li>ESP32-SvelteKit foundation (Svelte framework, PhysicsHttp, Stateful service, Event Sockets, Restful API, MDNS, MQTT)</li> <li>Modules: Generic building block to create server and UI functionality which can be activated through the menu by means of a json definition.</li> <li>Nodes\ud83e\udd5c: Generic building block to setup and run specific code and shows controls in the UI.</li> <li>Utilities (System logging, 3D coordinate system, String Management, Memory Management)</li> <li>Functionality, See MoonBase overview<ul> <li>Sveltekit: Connections, WiFi, System. </li> <li>MoonBase: Files, Tasks, Devices, IO.</li> </ul> </li> </ul> <p>MoonLight </p> <ul> <li>Layers: Physical and Virtual layers. Physical layer manages the real physical Lights or LEDs (using Layouts and Drivers). Multiple (currently 1) virtual layers (effects &amp; modifiers) are mapped to the physical layer.</li> <li>Functionality, See MoonLight overview<ul> <li>Control, Channels and Info</li> <li>Effects &amp; Modifiers</li> <li>Layouts &amp; Drivers.<ul> <li>DMX / Art-Net out</li> <li>WLED Audio Sync</li> </ul> </li> </ul> </li> </ul>"},{"location":"moonlight/overview/#looking-ahead","title":"Looking ahead","text":"<p>MoonBase</p> <ul> <li>ESP32-P4 support</li> <li>MIDI support (light control desks) </li> <li>Ethernet</li> <li>Live Scripts, see Live Scripts, included in MoonLight</li> <li>SuperSync \ud83e\udd5c: See above: development basically stopped in 2023 but the ideas are still there: device groups, sync effects, distributed effects.</li> <li>HA / MQTT</li> <li>UI enrichments</li> <li>Specific board profiles, E.g. see Premade boards</li> </ul> <p>MoonLight </p> <ul> <li>Multiple Layers</li> <li>DMX / Art-Net in</li> <li>Virtual driver</li> <li>Effects: Limited nr of effects but easy to add (tutorial)<ul> <li>Help needed!</li> <li>FastLED</li> <li>Animartrix</li> <li>Physics</li> <li>Live Scripts</li> </ul> </li> </ul>"},{"location":"moonlight/overview/#where-you-can-help","title":"Where you can help","text":"<ul> <li>Add more effects (FastLED, WLED, Particle system, Animartrix, Soulmate lights, ...), modifiers, layouts and drivers</li> <li>Improve the web installer</li> <li>Improve the UI (Svelte 5, DaisyUI 5, TailWind 4)</li> <li>e.g. File Manager, Multi row layout, Monitor (WebGL)</li> <li>Tune FastLED, add FastLED 2D effects</li> <li>CI automation (Generate daily builds in Github and use by installer)</li> <li>Palettes: more, custom, audio reactive</li> <li>...</li> </ul> <p>Contact us in the MoonLight channels on Discord MoonModules</p>"},{"location":"moonlight/overview/#emoji-coding","title":"Emoji coding","text":"<p>Effects, Modifiers, Layouts and drivers use emoji's to visualize their usage. See below for an overview:</p> <ul> <li>\ud83d\udd25 Effect<ul> <li>\ud83c\udfa8 Using palette</li> <li>\ud83d\udc19 WLED origin</li> <li>\ud83d\udcab MoonLight origin</li> <li>\ud83d\udea8 Moving head color effect</li> <li>\ud83d\uddfc Moving head move effect</li> </ul> </li> <li>\ud83d\udc8e Modifier</li> <li>\ud83d\udea5 Layout</li> <li> <p>\u2638\ufe0f Driver</p> </li> <li> <p>\u266b Audio reactive FFT based</p> </li> <li>\u266a Audio reactive volume based</li> <li>\ud83d\udca1 supports up to 0D</li> <li>\ud83d\udccf supports up to 1D</li> <li>\ud83d\udfe6 supports up to 2D</li> <li>\ud83e\uddca supports up to 3D</li> </ul>"},{"location":"network/ap/","title":"WiFi Access Point","text":""},{"location":"network/ethernet/","title":"Ethernet","text":"<p>\ud83d\udea7</p> <p>Not implemented yet</p>"},{"location":"network/mqtt/","title":"MQTT","text":""},{"location":"network/ntp/","title":"NTP","text":""},{"location":"network/sta/","title":"WiFi Station","text":"<ul> <li>WiFi TX Power \ud83c\udf19: WiFi transmit power can be set to optimize WiFi behavior. Some boards are known to work better by setting transmit power to 8.5 dBM (So called LOLIN_WIFI_FIX).<ul> <li>Default is typically 20 dBm (100mW) - the maximum allowed</li> <li>Common recommended settings:<ul> <li>For most indoor applications: 15-17 dBm</li> <li>For battery-powered devices: 10-15 dBm</li> <li>For close-range applications: 8-12 dBm</li> </ul> </li> <li>\ud83d\udea8: When the board is in AP mode, it is set to 8.5dBM as most boards work okay with this. WiFi is also initially set to 8.5dBM</li> </ul> </li> </ul>"},{"location":"system/metrics/","title":"System Metrics","text":"<p>Shows system info on a timeline</p> <ul> <li> \ud83c\udf19 Performance: show the loops per second of the main application loop. In case of MoonLight this is the Frames Per Second.</li> <li> \ud83c\udf19 PSRAM: Shows the used size of PSRAM, if present</li> <li>Energy history: shows battery charging, voltage and current measurements (if defined)</li> </ul>"},{"location":"system/status/","title":"System Status","text":"<ul> <li>\ud83c\udf19 Performance: loops per second: nr of times main loop is executed</li> <li>\ud83c\udf19 Safe Mode: After a crash, the device will start in Safe Mode disabling possible causes of crashes. See also MoonLight. In case of safe mode, the statusbar will show a shield: \ud83d\udee1\ufe0f. Try to find the reason of the crash and correct and restart the device. If no crash, it will go out of safe mode.</li> <li>\ud83c\udf19 Firmware Target: Which firmware has been installed, see MoonLight Web Installer</li> <li> <p>\ud83c\udf19 Firmware Date: What is the date the firmware is created (format YYYYMMDDHH)</p> </li> <li> <p>Sleep: Device is set in low power mode.</p> </li> <li>Restart: The device will restart</li> <li>Factory reset: all settings will be removed.</li> </ul>"},{"location":"system/update/","title":"System Update","text":"<p>This module supports Over the Air Updates (OTA). There are 2 ways to update the firmware in this module:</p> <ul> <li> <p>Using GitHub releases</p> <ul> <li>List of firmware releases is showed here</li> <li>Select one of the releases to install. In general it is advised to install the most recent version.</li> <li>If there is a new release, the app will notify it's availability.</li> <li>See here for details on releases: releases</li> </ul> <p></p> </li> <li> <p>Manually via Upload</p> <ul> <li>Select choose file, Press Upload if asked for Are you sure?. </li> </ul> </li> </ul> <p>When starting the update, a progress indicator is shown, upon completion the device will restart with the new firmware.</p> <p>Uptate on small devices not possible</p> <p>On some devices firmware update using above methods is not possible (yet) due to a limited amount of file size or memory (ESP32-D0 devices). Use the Installer procedure instead (without erasing the device)</p>"}]}